// Generated by CoffeeScript 2.0.0-beta5
var bugger, bugScript, domains, EventEmitter, inspectorServer, parallel;
EventEmitter = require('events').EventEmitter;
parallel = require('async').parallel;
bugScript = require('./bug-script');
domains = require('./domains');
inspectorServer = require('./inspector');
bugger = function (debugBreak, webport, webhost) {
  var forwardErrors, run, startScript, startServer, wire, wireStdIO, wrapEmitter;
  if (null == debugBreak)
    debugBreak = true;
  if (null == webport)
    webport = 8058;
  if (null == webhost)
    webhost = '127.0.0.1';
  startServer = function (cb) {
    var inspector;
    inspector = inspectorServer();
    return inspector.listen(webport, webhost, function () {
      return cb(null, inspector);
    });
  };
  wrapEmitter = new EventEmitter;
  forwardErrors = function (internalObjects) {
    internalObjects = 1 <= arguments.length ? [].slice.call(arguments, 0) : [];
    return function (accum$) {
      var internalObj;
      for (var i$ = 0, length$ = internalObjects.length; i$ < length$; ++i$) {
        internalObj = internalObjects[i$];
        accum$.push(internalObj.on('error', function (err) {
          return wrapEmitter.emit('error', err);
        }));
      }
      return accum$;
    }.call(this, []);
  };
  startScript = function (script, scriptArgs, options) {
    return function (cb) {
      return bugScript(script, scriptArgs, options, cb);
    };
  };
  wireStdIO = function (forked) {
    forked.stdout.pipe(process.stdout);
    forked.stderr.pipe(process.stderr);
    return process.stdin.pipe(forked.stdin);
  };
  wire = function (param$) {
    var cache$, debugClient, forked, inspector;
    {
      cache$ = param$;
      inspector = cache$.inspector;
      forked = cache$.forked;
      debugClient = cache$.debugClient;
      domains = cache$.domains;
    }
    wireStdIO(forked);
    forwardErrors(debugClient, domains, forked, inspector);
    domains.load({
      debugClient: debugClient,
      forked: forked
    });
    inspector.on('request', domains.handle);
    return domains.on('notification', inspector.dispatchEvent);
  };
  wrapEmitter.run = run = function (script, scriptArgs) {
    var tasks;
    if (null == scriptArgs)
      scriptArgs = [];
    tasks = [
      startServer,
      startScript(script, scriptArgs, { debugBreak: debugBreak })
    ];
    return parallel(tasks, function (err, param$) {
      var cache$, forked, inspector;
      {
        cache$ = param$;
        inspector = cache$[0];
        forked = cache$[1];
      }
      return forked.on('debugClient', function (debugClient) {
        var argString;
        wire({
          inspector: inspector,
          forked: forked,
          debugClient: debugClient,
          domains: domains
        });
        argString = scriptArgs.map(function (arg) {
          return JSON.stringify(arg);
        }).join(' ');
        console.log('[bugger] Debugging ' + script + ' ' + argString);
        return console.log('[bugger] ' + inspector.DEFAULT_URL);
      });
    });
  };
  return wrapEmitter;
};
module.exports = bugger;
if (!(null != module.parent))
  bugger().run('examples/simple.js');
