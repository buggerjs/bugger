// Generated by CoffeeScript 2.0.0-beta7
var isPrimitive, propertiesToJSON, resolveSelfRef, stringify;
stringify = require('json-stringify-safe');
resolveSelfRef = function (refs, body) {
  if (null != body.ref) {
    if (null != refs[body.ref])
      return refs[body.ref];
    else
      return body;
  } else {
    return body;
  }
};
isPrimitive = function (obj) {
  return in$(obj.type, [
    'number',
    'string',
    'boolean',
    'undefined',
    'null'
  ]);
};
propertiesToJSON = function (properties) {
  var json, property;
  json = {};
  for (var i$ = 0, length$ = properties.length; i$ < length$; ++i$) {
    property = properties[i$];
    json[property.name] = property.value.value;
  }
  return json;
};
module.exports = function (refs) {
  var mapValue;
  return mapValue = function (_body, depth) {
    var body, objectDefaults;
    if (null == depth)
      depth = 0;
    body = resolveSelfRef(refs, _body);
    if (null != body.handle)
      body.handle;
    else
      body.handle = body.ref;
    if (null != refs['value:' + body.handle])
      return refs['value:' + body.handle];
    objectDefaults = function (obj) {
      var property;
      obj.objectId = body.handle.toString();
      obj.className = body.className;
      obj.description = (null != body.text ? body.text : '').replace(/^#<(.*)>$/, '$1');
      if (obj.description === 'Array') {
        obj.subtype = 'array';
        for (var i$ = 0, length$ = body.properties.length; i$ < length$; ++i$) {
          property = body.properties[i$];
          if (property.name === 'length' && null != property.value)
            obj.description += '[' + property.value.value + ']';
        }
      }
      if (null != body.properties && depth === 0) {
        obj.properties = body.properties.map(function (property) {
          if (!property.value)
            property.value = null != refs[property.ref] ? refs[property.ref] : property;
          return {
            name: null != property.name ? property.name.toString() : void 0,
            value: mapValue(property.value, ++depth)
          };
        });
        if (null != obj.value)
          obj.value;
        else
          obj.value = propertiesToJSON(obj.properties);
      }
      return obj;
    };
    if (body.type === 'null' || body.type === 'undefined') {
      return { type: body.type };
    } else if (body.type === 'number' || body.type === 'string' || body.type === 'boolean') {
      return {
        type: body.type,
        value: body.value
      };
    } else if (body.type === 'function') {
      return {
        type: 'function',
        objectId: body.handle.toString(),
        className: body.className,
        description: body.text
      };
    } else if (body.type === 'regexp') {
      return objectDefaults({
        type: 'object',
        subtype: 'regexp'
      });
    } else if (body.type === 'object') {
      return objectDefaults({ type: 'object' });
    } else if (body.type === 'error') {
      return {
        type: 'object',
        className: body.className,
        description: body.text,
        value: null,
        properties: body.properties.map(function (property) {
          if (!property.value)
            property.value = null != refs[property.ref] ? refs[property.ref] : property;
          return {
            name: null != property.name ? property.name.toString() : void 0,
            value: mapValue(property.value, ++depth)
          };
        })
      };
    } else {
      return {
        type: 'object',
        objectId: body.handle
      };
    }
  };
};
function in$(member, list) {
  for (var i = 0, length = list.length; i < length; ++i)
    if (i in list && list[i] === member)
      return true;
  return false;
}
