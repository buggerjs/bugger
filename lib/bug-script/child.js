// Generated by CoffeeScript 2.0.0-beta5
var __thisFile, _nodeModulePaths, _sourceMaps, compiler, compilers, dirname, extension, extname, Module, readFile, readFileSync, realpath, registerExtension;
__thisFile = process.argv.splice(1, 1)[0];
cache$ = require('fs');
realpath = cache$.realpath;
readFile = cache$.readFile;
readFileSync = cache$.readFileSync;
cache$1 = require('path');
dirname = cache$1.dirname;
extname = cache$1.extname;
Module = require('module');
if (null != Module._sourceMaps)
  Module._sourceMaps;
else
  Module._sourceMaps = {};
cache$2 = Module;
_nodeModulePaths = cache$2._nodeModulePaths;
_sourceMaps = cache$2._sourceMaps;
compilers = require('./probes')(false).compilers;
registerExtension = function (extension, param$) {
  var compile;
  compile = param$.compile;
  return Object.defineProperty(require.extensions, extension, {
    enumerable: true,
    get: function () {
      return function (module, filename) {
        var cache$3, code, input, map;
        input = readFileSync(filename, 'utf8');
        cache$3 = compile(filename, input);
        code = cache$3.code;
        map = cache$3.map;
        if (null != map) {
          code += '\n//@ sourceMappingURL=data:application/json;base64,';
          code += new Buffer('' + map).toString('base64');
          code += '\n';
        }
        return module._compile(code, filename);
      };
    }
  });
};
for (extension in compilers) {
  compiler = compilers[extension];
  if (extension === '.js')
    continue;
  registerExtension(extension, compiler);
}
realpath(process.argv[1], function (err, filename) {
  var compile, mainModule, prependDebugBreak;
  if (null != err)
    throw err;
  mainModule = require.main;
  mainModule.filename = process.argv[1] = filename;
  mainModule.moduleCache && (mainModule.moduleCache = {});
  mainModule.paths = _nodeModulePaths(dirname(mainModule.filename));
  extension = extname(mainModule.filename);
  compile = (null != compilers[extension] ? compilers[extension] : compilers['.js']).compile;
  prependDebugBreak = null != process.env.ENABLE_DEBUG_BREAK;
  return readFile(filename, 'utf8', function (err, input) {
    var cache$3, code, map;
    if (null != err)
      throw err;
    cache$3 = compile(mainModule.filename, input);
    code = cache$3.code;
    map = cache$3.map;
    if (null != process.env.ENABLE_DEBUG_BREAK)
      code = 'debugger; ' + code;
    if (null != map) {
      code += '\n//@ sourceMappingURL=data:application/json;base64,';
      code += new Buffer('' + map).toString('base64');
      code += '\n';
      _sourceMaps[mainModule.filename] = map;
    }
    return mainModule._compile(code, filename);
  });
});
