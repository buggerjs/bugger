// Generated by CoffeeScript 2.0.0-beta5
var __thisFile, _nodeModulePaths, _sourceMaps, compilers, dirname, extname, Module, readFile, realpath, scriptContext;
__thisFile = process.argv.splice(1, 1)[0];
cache$ = require('fs');
realpath = cache$.realpath;
readFile = cache$.readFile;
cache$1 = require('path');
dirname = cache$1.dirname;
extname = cache$1.extname;
Module = require('module');
if (null != Module._sourceMaps)
  Module._sourceMaps;
else
  Module._sourceMaps = {};
cache$2 = Module;
_nodeModulePaths = cache$2._nodeModulePaths;
_sourceMaps = cache$2._sourceMaps;
compilers = {
  '.js': {
    compile: function (filename, code, cb) {
      return cb(null, {
        code: code,
        map: null
      });
    },
    compileString: function (input) {
      return input;
    }
  }
};
scriptContext = { compilers: compilers };
['./probes/coffee'].forEach(function (probeModule) {
  var load;
  load = require(probeModule).load;
  return load(scriptContext);
});
realpath(process.argv[1], function (err, filename) {
  var compile, extension, mainModule, prependDebugBreak;
  if (null != err)
    throw err;
  mainModule = require.main;
  mainModule.filename = process.argv[1] = filename;
  mainModule.moduleCache && (mainModule.moduleCache = {});
  mainModule.paths = _nodeModulePaths(dirname(mainModule.filename));
  extension = extname(mainModule.filename);
  compile = (null != compilers[extension] ? compilers[extension] : compilers['.js']).compile;
  prependDebugBreak = null != process.env.ENABLE_DEBUG_BREAK;
  return readFile(filename, 'utf8', function (err, input) {
    if (null != err)
      throw err;
    return compile(mainModule.filename, input, function (err, param$) {
      var cache$3, code, map;
      {
        cache$3 = param$;
        code = cache$3.code;
        map = cache$3.map;
      }
      if (null != err)
        throw err;
      if (null != process.env.ENABLE_DEBUG_BREAK)
        code = 'debugger; ' + code;
      if (null != map) {
        code += '\n//@ sourceMappingURL=data:application/json;base64,';
        code += new Buffer('' + map).toString('base64');
        code += '\n';
        _sourceMaps[mainModule.filename] = map;
      }
      return mainModule._compile(code, filename);
    });
  });
});
