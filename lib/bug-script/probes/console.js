// Generated by CoffeeScript 2.0.0-beta7
var ConsoleProbe, load;
ConsoleProbe = function () {
  var __old_log, logCounter;
  if (null != root.__bugger__)
    root.__bugger__;
  else
    root.__bugger__ = {};
  if (null != root.__bugger__.console)
    root.__bugger__.console;
  else
    root.__bugger__.console = {};
  logCounter = 0;
  __old_log = console.log;
  return console.log = function () {
    var arg, logId, logStore, objectIdPrefix, param, parameters, subId;
    if (arguments.length < 1) {
      return __old_log.apply(console, arguments);
    } else if (arguments.length === 1 && typeof arguments[0] === 'string') {
      return __old_log.apply(console, arguments);
    } else {
      parameters = [];
      logId = '_log' + ++logCounter;
      objectIdPrefix = 'console:' + logId;
      subId = 0;
      for (var i$ = 0, length$ = arguments.length; i$ < length$; ++i$) {
        arg = arguments[i$];
        param = { type: typeof arg };
        if (!('undefined' !== typeof arg && null != arg) || (param.type === 'string' || param.type === 'number' || param.type === 'boolean')) {
          param.value = arg;
          if (arg === null)
            param.type = 'null';
        } else {
          param.description = arg.constructor.name;
          param.subtype = function () {
            switch (arg.constructor.name) {
            case 'Date':
              return 'date';
            case 'RegExp':
              return 'regexp';
            case 'Array':
              param.description = 'Array[' + arg.length + ']';
              return 'array';
            }
          }.call(this);
          if (Buffer.isBuffer(arg))
            param.description = 'Buffer[' + arg.length + ']';
          ++subId;
          param.objectId = '' + objectIdPrefix + ':' + JSON.stringify([subId]);
          logStore = null != root.__bugger__.console[logId] ? root.__bugger__.console[logId] : root.__bugger__.console[logId] = {};
          logStore[subId] = arg;
        }
        parameters.push(param);
      }
      return process.send({
        method: 'Console.emit_messageAdded',
        message: {
          level: 'log',
          parameters: parameters
        }
      });
    }
  };
};
load = function (scriptContext, safe) {
  var agents;
  if (null == safe)
    safe = false;
  if (safe)
    return;
  agents = { Console: ConsoleProbe() };
  return process.on('message', function (message) {
    var cache$, cache$1, cache$2, command, domain, method, seq;
    if (message.type === 'forward_req') {
      cache$ = message;
      command = cache$.command;
      seq = cache$.seq;
      cache$1 = command.split('.');
      domain = cache$1[0];
      method = cache$1[1];
      if (!(domain === 'Console'))
        return;
      cache$2 = message.command.split('.');
      domain = cache$2[0];
      method = cache$2[1];
      return agents[domain][method](message.params, function (err, data) {
        var response;
        response = {
          command: command,
          request_seq: seq,
          type: 'forward_res'
        };
        if (null != err) {
          response.error = {
            message: err.message,
            code: err.code,
            type: err.type
          };
        } else {
          response.data = data;
        }
        return process.send(response);
      });
    }
  });
};
module.exports = { load: load };
