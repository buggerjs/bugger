// Generated by CoffeeScript 2.0.0-beta5
var EventEmitter;
EventEmitter = require('events').EventEmitter;
module.exports = function (agentContext) {
  var CSS;
  CSS = new EventEmitter;
  CSS.enable = function (param$, cb) {
    void 0;
  };
  CSS.disable = function (param$, cb) {
    void 0;
  };
  CSS.getMatchedStylesForNode = function (param$, cb) {
    var cache$, includeInherited, includePseudo, nodeId;
    {
      cache$ = param$;
      nodeId = cache$.nodeId;
      includePseudo = cache$.includePseudo;
      includeInherited = cache$.includeInherited;
    }
  };
  CSS.getInlineStylesForNode = function (param$, cb) {
    var nodeId;
    nodeId = param$.nodeId;
  };
  CSS.getComputedStyleForNode = function (param$, cb) {
    var nodeId;
    nodeId = param$.nodeId;
  };
  CSS.getAllStyleSheets = function (param$, cb) {
    void 0;
  };
  CSS.getStyleSheet = function (param$, cb) {
    var styleSheetId;
    styleSheetId = param$.styleSheetId;
  };
  CSS.getStyleSheetText = function (param$, cb) {
    var styleSheetId;
    styleSheetId = param$.styleSheetId;
  };
  CSS.setStyleSheetText = function (param$, cb) {
    var cache$, styleSheetId, text;
    {
      cache$ = param$;
      styleSheetId = cache$.styleSheetId;
      text = cache$.text;
    }
  };
  CSS.setStyleText = function (param$, cb) {
    var cache$, styleId, text;
    {
      cache$ = param$;
      styleId = cache$.styleId;
      text = cache$.text;
    }
  };
  CSS.setPropertyText = function (param$, cb) {
    var cache$, overwrite, propertyIndex, styleId, text;
    {
      cache$ = param$;
      styleId = cache$.styleId;
      propertyIndex = cache$.propertyIndex;
      text = cache$.text;
      overwrite = cache$.overwrite;
    }
  };
  CSS.toggleProperty = function (param$, cb) {
    var cache$, disable, propertyIndex, styleId;
    {
      cache$ = param$;
      styleId = cache$.styleId;
      propertyIndex = cache$.propertyIndex;
      disable = cache$.disable;
    }
  };
  CSS.setRuleSelector = function (param$, cb) {
    var cache$, ruleId, selector;
    {
      cache$ = param$;
      ruleId = cache$.ruleId;
      selector = cache$.selector;
    }
  };
  CSS.addRule = function (param$, cb) {
    var cache$, contextNodeId, selector;
    {
      cache$ = param$;
      contextNodeId = cache$.contextNodeId;
      selector = cache$.selector;
    }
  };
  CSS.getSupportedCSSProperties = function (param$, cb) {
    void 0;
  };
  CSS.forcePseudoState = function (param$, cb) {
    var cache$, forcedPseudoClasses, nodeId;
    {
      cache$ = param$;
      nodeId = cache$.nodeId;
      forcedPseudoClasses = cache$.forcedPseudoClasses;
    }
  };
  CSS.startSelectorProfiler = function (param$, cb) {
    void 0;
  };
  CSS.stopSelectorProfiler = function (param$, cb) {
    void 0;
  };
  CSS.getNamedFlowCollection = function (param$, cb) {
    var documentNodeId;
    documentNodeId = param$.documentNodeId;
  };
  CSS.emit_mediaQueryResultChanged = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'CSS.mediaQueryResultChanged'
    };
    return this.emit('notification', notification);
  };
  CSS.emit_styleSheetChanged = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'CSS.styleSheetChanged'
    };
    return this.emit('notification', notification);
  };
  CSS.emit_namedFlowCreated = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'CSS.namedFlowCreated'
    };
    return this.emit('notification', notification);
  };
  CSS.emit_namedFlowRemoved = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'CSS.namedFlowRemoved'
    };
    return this.emit('notification', notification);
  };
  CSS.emit_regionLayoutUpdated = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'CSS.regionLayoutUpdated'
    };
    return this.emit('notification', notification);
  };
  CSS.StyleSheetId = {
    id: 'StyleSheetId',
    type: 'string'
  };
  CSS.CSSStyleId = {
    id: 'CSSStyleId',
    type: 'object',
    properties: [
      {
        name: 'styleSheetId',
        $ref: 'StyleSheetId',
        description: 'Enclosing stylesheet identifier.'
      },
      {
        name: 'ordinal',
        type: 'integer',
        description: 'The style ordinal within the stylesheet.'
      }
    ],
    description: 'This object identifies a CSS style in a unique way.'
  };
  CSS.StyleSheetOrigin = {
    id: 'StyleSheetOrigin',
    type: 'string',
    'enum': [
      'user',
      'user-agent',
      'inspector',
      'regular'
    ],
    description: 'Stylesheet type: "user" for user stylesheets, "user-agent" for user-agent stylesheets, "inspector" for stylesheets created by the inspector (i.e. those holding the "via inspector" rules), "regular" for regular stylesheets.'
  };
  CSS.CSSRuleId = {
    id: 'CSSRuleId',
    type: 'object',
    properties: [
      {
        name: 'styleSheetId',
        $ref: 'StyleSheetId',
        description: 'Enclosing stylesheet identifier.'
      },
      {
        name: 'ordinal',
        type: 'integer',
        description: 'The rule ordinal within the stylesheet.'
      }
    ],
    description: 'This object identifies a CSS rule in a unique way.'
  };
  CSS.PseudoIdMatches = {
    id: 'PseudoIdMatches',
    type: 'object',
    properties: [
      {
        name: 'pseudoId',
        type: 'integer',
        description: 'Pseudo style identifier (see <code>enum PseudoId</code> in <code>RenderStyleConstants.h</code>).'
      },
      {
        name: 'matches',
        type: 'array',
        items: { $ref: 'RuleMatch' },
        description: 'Matches of CSS rules applicable to the pseudo style.'
      }
    ],
    description: 'CSS rule collection for a single pseudo style.'
  };
  CSS.InheritedStyleEntry = {
    id: 'InheritedStyleEntry',
    type: 'object',
    properties: [
      {
        name: 'inlineStyle',
        $ref: 'CSSStyle',
        optional: true,
        description: "The ancestor node's inline style, if any, in the style inheritance chain."
      },
      {
        name: 'matchedCSSRules',
        type: 'array',
        items: { $ref: 'RuleMatch' },
        description: 'Matches of CSS rules matching the ancestor node in the style inheritance chain.'
      }
    ],
    description: 'CSS rule collection for a single pseudo style.'
  };
  CSS.RuleMatch = {
    id: 'RuleMatch',
    type: 'object',
    properties: [
      {
        name: 'rule',
        $ref: 'CSSRule',
        description: 'CSS rule in the match.'
      },
      {
        name: 'matchingSelectors',
        type: 'array',
        items: { type: 'integer' },
        description: "Matching selector indices in the rule's selectorList selectors (0-based)."
      }
    ],
    description: 'Match data for a CSS rule.'
  };
  CSS.SelectorList = {
    id: 'SelectorList',
    type: 'object',
    properties: [
      {
        name: 'selectors',
        type: 'array',
        items: { type: 'string' },
        description: 'Selectors in the list.'
      },
      {
        name: 'text',
        type: 'string',
        description: 'Rule selector text.'
      },
      {
        name: 'range',
        $ref: 'SourceRange',
        optional: true,
        description: 'Rule selector range in the underlying resource (if available).'
      }
    ],
    description: 'Selector list data.'
  };
  CSS.CSSStyleAttribute = {
    id: 'CSSStyleAttribute',
    type: 'object',
    properties: [
      {
        name: 'name',
        type: 'string',
        description: 'DOM attribute name (e.g. "width").'
      },
      {
        name: 'style',
        $ref: 'CSSStyle',
        description: 'CSS style generated by the respective DOM attribute.'
      }
    ],
    description: 'CSS style information for a DOM style attribute.'
  };
  CSS.CSSStyleSheetHeader = {
    id: 'CSSStyleSheetHeader',
    type: 'object',
    properties: [
      {
        name: 'styleSheetId',
        $ref: 'StyleSheetId',
        description: 'The stylesheet identifier.'
      },
      {
        name: 'frameId',
        $ref: 'Network.FrameId',
        description: 'Owner frame identifier.'
      },
      {
        name: 'sourceURL',
        type: 'string',
        description: 'Stylesheet resource URL.'
      },
      {
        name: 'origin',
        $ref: 'StyleSheetOrigin',
        description: 'Stylesheet origin.'
      },
      {
        name: 'title',
        type: 'string',
        description: 'Stylesheet title.'
      },
      {
        name: 'disabled',
        type: 'boolean',
        description: 'Denotes whether the stylesheet is disabled.'
      }
    ],
    description: 'CSS stylesheet metainformation.'
  };
  CSS.CSSStyleSheetBody = {
    id: 'CSSStyleSheetBody',
    type: 'object',
    properties: [
      {
        name: 'styleSheetId',
        $ref: 'StyleSheetId',
        description: 'The stylesheet identifier.'
      },
      {
        name: 'rules',
        type: 'array',
        items: { $ref: 'CSSRule' },
        description: 'Stylesheet resource URL.'
      },
      {
        name: 'text',
        type: 'string',
        optional: true,
        description: 'Stylesheet resource contents (if available).'
      }
    ],
    description: 'CSS stylesheet contents.'
  };
  CSS.CSSRule = {
    id: 'CSSRule',
    type: 'object',
    properties: [
      {
        name: 'ruleId',
        $ref: 'CSSRuleId',
        optional: true,
        description: 'The CSS rule identifier (absent for user agent stylesheet and user-specified stylesheet rules).'
      },
      {
        name: 'selectorList',
        $ref: 'SelectorList',
        description: 'Rule selector data.'
      },
      {
        name: 'sourceURL',
        type: 'string',
        optional: true,
        description: 'Parent stylesheet resource URL (for regular rules).'
      },
      {
        name: 'sourceLine',
        type: 'integer',
        description: 'Line ordinal of the rule selector start character in the resource.'
      },
      {
        name: 'origin',
        $ref: 'StyleSheetOrigin',
        description: "Parent stylesheet's origin."
      },
      {
        name: 'style',
        $ref: 'CSSStyle',
        description: 'Associated style declaration.'
      },
      {
        name: 'media',
        type: 'array',
        items: { $ref: 'CSSMedia' },
        optional: true,
        description: 'Media list array (for rules involving media queries). The array enumerates media queries starting with the innermost one, going outwards.'
      }
    ],
    description: 'CSS rule representation.'
  };
  CSS.SourceRange = {
    id: 'SourceRange',
    type: 'object',
    properties: [
      {
        name: 'startLine',
        type: 'integer',
        description: 'Start line of range.'
      },
      {
        name: 'startColumn',
        type: 'integer',
        description: 'Start column of range (inclusive).'
      },
      {
        name: 'endLine',
        type: 'integer',
        description: 'End line of range'
      },
      {
        name: 'endColumn',
        type: 'integer',
        description: 'End column of range (exclusive).'
      }
    ],
    description: 'Text range within a resource.'
  };
  CSS.ShorthandEntry = {
    id: 'ShorthandEntry',
    type: 'object',
    properties: [
      {
        name: 'name',
        type: 'string',
        description: 'Shorthand name.'
      },
      {
        name: 'value',
        type: 'string',
        description: 'Shorthand value.'
      }
    ]
  };
  CSS.CSSPropertyInfo = {
    id: 'CSSPropertyInfo',
    type: 'object',
    properties: [
      {
        name: 'name',
        type: 'string',
        description: 'Property name.'
      },
      {
        name: 'longhands',
        type: 'array',
        optional: true,
        items: { type: 'string' },
        description: 'Longhand property names.'
      }
    ]
  };
  CSS.CSSComputedStyleProperty = {
    id: 'CSSComputedStyleProperty',
    type: 'object',
    properties: [
      {
        name: 'name',
        type: 'string',
        description: 'Computed style property name.'
      },
      {
        name: 'value',
        type: 'string',
        description: 'Computed style property value.'
      }
    ]
  };
  CSS.CSSStyle = {
    id: 'CSSStyle',
    type: 'object',
    properties: [
      {
        name: 'styleId',
        $ref: 'CSSStyleId',
        optional: true,
        description: 'The CSS style identifier (absent for attribute styles).'
      },
      {
        name: 'cssProperties',
        type: 'array',
        items: { $ref: 'CSSProperty' },
        description: 'CSS properties in the style.'
      },
      {
        name: 'shorthandEntries',
        type: 'array',
        items: { $ref: 'ShorthandEntry' },
        description: 'Computed values for all shorthands found in the style.'
      },
      {
        name: 'cssText',
        type: 'string',
        optional: true,
        description: 'Style declaration text (if available).'
      },
      {
        name: 'range',
        $ref: 'SourceRange',
        optional: true,
        description: 'Style declaration range in the enclosing stylesheet (if available).'
      },
      {
        name: 'width',
        type: 'string',
        optional: true,
        description: 'The effective "width" property value from this style.'
      },
      {
        name: 'height',
        type: 'string',
        optional: true,
        description: 'The effective "height" property value from this style.'
      }
    ],
    description: 'CSS style representation.'
  };
  CSS.CSSProperty = {
    id: 'CSSProperty',
    type: 'object',
    properties: [
      {
        name: 'name',
        type: 'string',
        description: 'The property name.'
      },
      {
        name: 'value',
        type: 'string',
        description: 'The property value.'
      },
      {
        name: 'priority',
        type: 'string',
        optional: true,
        description: 'The property priority (implies "" if absent).'
      },
      {
        name: 'implicit',
        type: 'boolean',
        optional: true,
        description: 'Whether the property is implicit (implies <code>false</code> if absent).'
      },
      {
        name: 'text',
        type: 'string',
        optional: true,
        description: 'The full property text as specified in the style.'
      },
      {
        name: 'parsedOk',
        type: 'boolean',
        optional: true,
        description: 'Whether the property is understood by the browser (implies <code>true</code> if absent).'
      },
      {
        name: 'status',
        type: 'string',
        'enum': [
          'active',
          'inactive',
          'disabled',
          'style'
        ],
        optional: true,
        description: 'The property status: "active" if the property is effective in the style, "inactive" if the property is overridden by a same-named property in this style later on, "disabled" if the property is disabled by the user, "style" (implied if absent) if the property is reported by the browser rather than by the CSS source parser.'
      },
      {
        name: 'range',
        $ref: 'SourceRange',
        optional: true,
        description: 'The entire property range in the enclosing style declaration (if available).'
      }
    ],
    description: 'CSS style effective visual dimensions and source offsets.'
  };
  CSS.CSSMedia = {
    id: 'CSSMedia',
    type: 'object',
    properties: [
      {
        name: 'text',
        type: 'string',
        description: 'Media query text.'
      },
      {
        name: 'source',
        type: 'string',
        'enum': [
          'mediaRule',
          'importRule',
          'linkedSheet',
          'inlineSheet'
        ],
        description: 'Source of the media query: "mediaRule" if specified by a @media rule, "importRule" if specified by an @import rule, "linkedSheet" if specified by a "media" attribute in a linked stylesheet\'s LINK tag, "inlineSheet" if specified by a "media" attribute in an inline stylesheet\'s STYLE tag.'
      },
      {
        name: 'sourceURL',
        type: 'string',
        optional: true,
        description: 'URL of the document containing the media query description.'
      },
      {
        name: 'sourceLine',
        type: 'integer',
        optional: true,
        description: 'Line in the document containing the media query (not defined for the "stylesheet" source).'
      }
    ],
    description: 'CSS media query descriptor.'
  };
  CSS.SelectorProfileEntry = {
    id: 'SelectorProfileEntry',
    type: 'object',
    properties: [
      {
        name: 'selector',
        type: 'string',
        description: 'CSS selector of the corresponding rule.'
      },
      {
        name: 'url',
        type: 'string',
        description: 'URL of the resource containing the corresponding rule.'
      },
      {
        name: 'lineNumber',
        type: 'integer',
        description: 'Selector line number in the resource for the corresponding rule.'
      },
      {
        name: 'time',
        type: 'number',
        description: 'Total time this rule handling contributed to the browser running time during profiling (in milliseconds.)'
      },
      {
        name: 'hitCount',
        type: 'integer',
        description: 'Number of times this rule was considered a candidate for matching against DOM elements.'
      },
      {
        name: 'matchCount',
        type: 'integer',
        description: 'Number of times this rule actually matched a DOM element.'
      }
    ],
    description: 'CSS selector profile entry.'
  };
  CSS.SelectorProfile = {
    id: 'SelectorProfile',
    type: 'object',
    properties: [
      {
        name: 'totalTime',
        type: 'number',
        description: 'Total processing time for all selectors in the profile (in milliseconds.)'
      },
      {
        name: 'data',
        type: 'array',
        items: { $ref: 'SelectorProfileEntry' },
        description: 'CSS selector profile entries.'
      }
    ]
  };
  CSS.Region = {
    id: 'Region',
    type: 'object',
    properties: [
      {
        name: 'regionOverset',
        type: 'string',
        'enum': [
          'overset',
          'fit',
          'empty'
        ],
        description: 'The "overset" attribute of a Named Flow.'
      },
      {
        name: 'nodeId',
        $ref: 'DOM.NodeId',
        description: 'The corresponding DOM node id.'
      }
    ],
    description: 'This object represents a region that flows from a Named Flow.',
    hidden: true
  };
  CSS.NamedFlow = {
    id: 'NamedFlow',
    type: 'object',
    properties: [
      {
        name: 'documentNodeId',
        $ref: 'DOM.NodeId',
        description: 'The document node id.'
      },
      {
        name: 'name',
        type: 'string',
        description: 'Named Flow identifier.'
      },
      {
        name: 'overset',
        type: 'boolean',
        description: 'The "overset" attribute of a Named Flow.'
      },
      {
        name: 'content',
        type: 'array',
        items: { $ref: 'DOM.NodeId' },
        description: 'An array of nodes that flow into the Named Flow.'
      },
      {
        name: 'regions',
        type: 'array',
        items: { $ref: 'Region' },
        description: 'An array of regions associated with the Named Flow.'
      }
    ],
    description: 'This object represents a Named Flow.',
    hidden: true
  };
  return CSS;
};
