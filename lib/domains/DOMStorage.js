// Generated by CoffeeScript 2.0.0-beta7
var EventEmitter;
EventEmitter = require('events').EventEmitter;
module.exports = function (agentContext) {
  var DOMStorage;
  DOMStorage = new EventEmitter;
  DOMStorage.enable = function (param$, cb) {
    void 0;
  };
  DOMStorage.disable = function (param$, cb) {
    void 0;
  };
  DOMStorage.getDOMStorageItems = function (param$, cb) {
    var storageId;
    storageId = param$.storageId;
  };
  DOMStorage.setDOMStorageItem = function (param$, cb) {
    var cache$, key, storageId, value;
    {
      cache$ = param$;
      storageId = cache$.storageId;
      key = cache$.key;
      value = cache$.value;
    }
  };
  DOMStorage.removeDOMStorageItem = function (param$, cb) {
    var cache$, key, storageId;
    {
      cache$ = param$;
      storageId = cache$.storageId;
      key = cache$.key;
    }
  };
  DOMStorage.emit_domStorageItemsCleared = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'DOMStorage.domStorageItemsCleared'
    };
    return this.emit('notification', notification);
  };
  DOMStorage.emit_domStorageItemRemoved = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'DOMStorage.domStorageItemRemoved'
    };
    return this.emit('notification', notification);
  };
  DOMStorage.emit_domStorageItemAdded = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'DOMStorage.domStorageItemAdded'
    };
    return this.emit('notification', notification);
  };
  DOMStorage.emit_domStorageItemUpdated = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'DOMStorage.domStorageItemUpdated'
    };
    return this.emit('notification', notification);
  };
  DOMStorage.StorageId = {
    id: 'StorageId',
    type: 'object',
    description: 'DOM Storage identifier.',
    hidden: true,
    properties: [
      {
        name: 'securityOrigin',
        type: 'string',
        description: 'Security origin for the storage.'
      },
      {
        name: 'isLocalStorage',
        type: 'boolean',
        description: 'Whether the storage is local storage (not session storage).'
      }
    ]
  };
  DOMStorage.Item = {
    id: 'Item',
    type: 'array',
    description: 'DOM Storage item.',
    hidden: true,
    items: { type: 'string' }
  };
  return DOMStorage;
};
