// Generated by CoffeeScript 2.0.0-beta5
var EventEmitter;
EventEmitter = require('events').EventEmitter;
module.exports = function (agentContext) {
  var DOM;
  DOM = new EventEmitter;
  DOM.getDocument = function (param$, cb) {
    void 0;
  };
  DOM.requestChildNodes = function (param$, cb) {
    var cache$, depth, nodeId;
    {
      cache$ = param$;
      nodeId = cache$.nodeId;
      depth = cache$.depth;
    }
  };
  DOM.querySelector = function (param$, cb) {
    var cache$, nodeId, selector;
    {
      cache$ = param$;
      nodeId = cache$.nodeId;
      selector = cache$.selector;
    }
  };
  DOM.querySelectorAll = function (param$, cb) {
    var cache$, nodeId, selector;
    {
      cache$ = param$;
      nodeId = cache$.nodeId;
      selector = cache$.selector;
    }
  };
  DOM.setNodeName = function (param$, cb) {
    var cache$, name, nodeId;
    {
      cache$ = param$;
      nodeId = cache$.nodeId;
      name = cache$.name;
    }
  };
  DOM.setNodeValue = function (param$, cb) {
    var cache$, nodeId, value;
    {
      cache$ = param$;
      nodeId = cache$.nodeId;
      value = cache$.value;
    }
  };
  DOM.removeNode = function (param$, cb) {
    var nodeId;
    nodeId = param$.nodeId;
  };
  DOM.setAttributeValue = function (param$, cb) {
    var cache$, name, nodeId, value;
    {
      cache$ = param$;
      nodeId = cache$.nodeId;
      name = cache$.name;
      value = cache$.value;
    }
  };
  DOM.setAttributesAsText = function (param$, cb) {
    var cache$, name, nodeId, text;
    {
      cache$ = param$;
      nodeId = cache$.nodeId;
      text = cache$.text;
      name = cache$.name;
    }
  };
  DOM.removeAttribute = function (param$, cb) {
    var cache$, name, nodeId;
    {
      cache$ = param$;
      nodeId = cache$.nodeId;
      name = cache$.name;
    }
  };
  DOM.getEventListenersForNode = function (param$, cb) {
    var cache$, nodeId, objectGroup;
    {
      cache$ = param$;
      nodeId = cache$.nodeId;
      objectGroup = cache$.objectGroup;
    }
  };
  DOM.getOuterHTML = function (param$, cb) {
    var nodeId;
    nodeId = param$.nodeId;
  };
  DOM.setOuterHTML = function (param$, cb) {
    var cache$, nodeId, outerHTML;
    {
      cache$ = param$;
      nodeId = cache$.nodeId;
      outerHTML = cache$.outerHTML;
    }
  };
  DOM.performSearch = function (param$, cb) {
    var query;
    query = param$.query;
  };
  DOM.getSearchResults = function (param$, cb) {
    var cache$, fromIndex, searchId, toIndex;
    {
      cache$ = param$;
      searchId = cache$.searchId;
      fromIndex = cache$.fromIndex;
      toIndex = cache$.toIndex;
    }
  };
  DOM.discardSearchResults = function (param$, cb) {
    var searchId;
    searchId = param$.searchId;
  };
  DOM.requestNode = function (param$, cb) {
    var objectId;
    objectId = param$.objectId;
  };
  DOM.setInspectModeEnabled = function (param$, cb) {
    var cache$, enabled, highlightConfig;
    {
      cache$ = param$;
      enabled = cache$.enabled;
      highlightConfig = cache$.highlightConfig;
    }
  };
  DOM.highlightRect = function (param$, cb) {
    var cache$, color, height, outlineColor, usePageCoordinates, width, x, y;
    {
      cache$ = param$;
      x = cache$.x;
      y = cache$.y;
      width = cache$.width;
      height = cache$.height;
      color = cache$.color;
      outlineColor = cache$.outlineColor;
      usePageCoordinates = cache$.usePageCoordinates;
    }
  };
  DOM.highlightQuad = function (param$, cb) {
    var cache$, color, outlineColor, quad, usePageCoordinates;
    {
      cache$ = param$;
      quad = cache$.quad;
      color = cache$.color;
      outlineColor = cache$.outlineColor;
      usePageCoordinates = cache$.usePageCoordinates;
    }
  };
  DOM.highlightNode = function (param$, cb) {
    var cache$, highlightConfig, nodeId, objectId;
    {
      cache$ = param$;
      highlightConfig = cache$.highlightConfig;
      nodeId = cache$.nodeId;
      objectId = cache$.objectId;
    }
  };
  DOM.hideHighlight = function (param$, cb) {
    void 0;
  };
  DOM.highlightFrame = function (param$, cb) {
    var cache$, contentColor, contentOutlineColor, frameId;
    {
      cache$ = param$;
      frameId = cache$.frameId;
      contentColor = cache$.contentColor;
      contentOutlineColor = cache$.contentOutlineColor;
    }
  };
  DOM.pushNodeByPathToFrontend = function (param$, cb) {
    var path;
    path = param$.path;
  };
  DOM.pushNodeByBackendIdToFrontend = function (param$, cb) {
    var backendNodeId;
    backendNodeId = param$.backendNodeId;
  };
  DOM.releaseBackendNodeIds = function (param$, cb) {
    var nodeGroup;
    nodeGroup = param$.nodeGroup;
  };
  DOM.resolveNode = function (param$, cb) {
    var cache$, nodeId, objectGroup;
    {
      cache$ = param$;
      nodeId = cache$.nodeId;
      objectGroup = cache$.objectGroup;
    }
  };
  DOM.getAttributes = function (param$, cb) {
    var nodeId;
    nodeId = param$.nodeId;
  };
  DOM.moveTo = function (param$, cb) {
    var cache$, insertBeforeNodeId, nodeId, targetNodeId;
    {
      cache$ = param$;
      nodeId = cache$.nodeId;
      targetNodeId = cache$.targetNodeId;
      insertBeforeNodeId = cache$.insertBeforeNodeId;
    }
  };
  DOM.undo = function (param$, cb) {
    void 0;
  };
  DOM.redo = function (param$, cb) {
    void 0;
  };
  DOM.markUndoableState = function (param$, cb) {
    void 0;
  };
  DOM.focus = function (param$, cb) {
    var nodeId;
    nodeId = param$.nodeId;
  };
  DOM.setFileInputFiles = function (param$, cb) {
    var cache$, files, nodeId;
    {
      cache$ = param$;
      nodeId = cache$.nodeId;
      files = cache$.files;
    }
  };
  DOM.emit_documentUpdated = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'DOM.documentUpdated'
    };
    return this.emit('notification', notification);
  };
  DOM.emit_setChildNodes = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'DOM.setChildNodes'
    };
    return this.emit('notification', notification);
  };
  DOM.emit_attributeModified = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'DOM.attributeModified'
    };
    return this.emit('notification', notification);
  };
  DOM.emit_attributeRemoved = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'DOM.attributeRemoved'
    };
    return this.emit('notification', notification);
  };
  DOM.emit_inlineStyleInvalidated = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'DOM.inlineStyleInvalidated'
    };
    return this.emit('notification', notification);
  };
  DOM.emit_characterDataModified = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'DOM.characterDataModified'
    };
    return this.emit('notification', notification);
  };
  DOM.emit_childNodeCountUpdated = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'DOM.childNodeCountUpdated'
    };
    return this.emit('notification', notification);
  };
  DOM.emit_childNodeInserted = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'DOM.childNodeInserted'
    };
    return this.emit('notification', notification);
  };
  DOM.emit_childNodeRemoved = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'DOM.childNodeRemoved'
    };
    return this.emit('notification', notification);
  };
  DOM.emit_shadowRootPushed = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'DOM.shadowRootPushed'
    };
    return this.emit('notification', notification);
  };
  DOM.emit_shadowRootPopped = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'DOM.shadowRootPopped'
    };
    return this.emit('notification', notification);
  };
  DOM.NodeId = {
    id: 'NodeId',
    type: 'integer',
    description: 'Unique DOM node identifier.'
  };
  DOM.BackendNodeId = {
    id: 'BackendNodeId',
    type: 'integer',
    description: 'Unique DOM node identifier used to reference a node that may not have been pushed to the front-end.',
    hidden: true
  };
  DOM.Node = {
    id: 'Node',
    type: 'object',
    properties: [
      {
        name: 'nodeId',
        $ref: 'NodeId',
        description: 'Node identifier that is passed into the rest of the DOM messages as the <code>nodeId</code>. Backend will only push node with given <code>id</code> once. It is aware of all requested nodes and will only fire DOM events for nodes known to the client.'
      },
      {
        name: 'nodeType',
        type: 'integer',
        description: "<code>Node</code>'s nodeType."
      },
      {
        name: 'nodeName',
        type: 'string',
        description: "<code>Node</code>'s nodeName."
      },
      {
        name: 'localName',
        type: 'string',
        description: "<code>Node</code>'s localName."
      },
      {
        name: 'nodeValue',
        type: 'string',
        description: "<code>Node</code>'s nodeValue."
      },
      {
        name: 'childNodeCount',
        type: 'integer',
        optional: true,
        description: 'Child count for <code>Container</code> nodes.'
      },
      {
        name: 'children',
        type: 'array',
        optional: true,
        items: { $ref: 'Node' },
        description: 'Child nodes of this node when requested with children.'
      },
      {
        name: 'attributes',
        type: 'array',
        optional: true,
        items: { type: 'string' },
        description: 'Attributes of the <code>Element</code> node in the form of flat array <code>[name1, value1, name2, value2]</code>.'
      },
      {
        name: 'documentURL',
        type: 'string',
        optional: true,
        description: 'Document URL that <code>Document</code> or <code>FrameOwner</code> node points to.'
      },
      {
        name: 'baseURL',
        type: 'string',
        optional: true,
        description: 'Base URL that <code>Document</code> or <code>FrameOwner</code> node uses for URL completion.',
        hidden: true
      },
      {
        name: 'publicId',
        type: 'string',
        optional: true,
        description: "<code>DocumentType</code>'s publicId."
      },
      {
        name: 'systemId',
        type: 'string',
        optional: true,
        description: "<code>DocumentType</code>'s systemId."
      },
      {
        name: 'internalSubset',
        type: 'string',
        optional: true,
        description: "<code>DocumentType</code>'s internalSubset."
      },
      {
        name: 'xmlVersion',
        type: 'string',
        optional: true,
        description: "<code>Document</code>'s XML version in case of XML documents."
      },
      {
        name: 'name',
        type: 'string',
        optional: true,
        description: "<code>Attr</code>'s name."
      },
      {
        name: 'value',
        type: 'string',
        optional: true,
        description: "<code>Attr</code>'s value."
      },
      {
        name: 'frameId',
        $ref: 'Network.FrameId',
        optional: true,
        description: 'Frame ID for frame owner elements.',
        hidden: true
      },
      {
        name: 'contentDocument',
        $ref: 'Node',
        optional: true,
        description: 'Content document for frame owner elements.'
      },
      {
        name: 'shadowRoots',
        type: 'array',
        optional: true,
        items: { $ref: 'Node' },
        description: 'Shadow root list for given element host.',
        hidden: true
      },
      {
        name: 'templateContent',
        $ref: 'Node',
        optional: true,
        description: 'Content document fragment for template elements',
        hidden: true
      }
    ],
    description: 'DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes. DOMNode is a base node mirror type.'
  };
  DOM.EventListener = {
    id: 'EventListener',
    type: 'object',
    hidden: true,
    properties: [
      {
        name: 'type',
        type: 'string',
        description: "<code>EventListener</code>'s type."
      },
      {
        name: 'useCapture',
        type: 'boolean',
        description: "<code>EventListener</code>'s useCapture."
      },
      {
        name: 'isAttribute',
        type: 'boolean',
        description: "<code>EventListener</code>'s isAttribute."
      },
      {
        name: 'nodeId',
        $ref: 'NodeId',
        description: 'Target <code>DOMNode</code> id.'
      },
      {
        name: 'handlerBody',
        type: 'string',
        description: 'Event handler function body.'
      },
      {
        name: 'location',
        $ref: 'Debugger.Location',
        optional: true,
        description: 'Handler code location.'
      },
      {
        name: 'sourceName',
        type: 'string',
        optional: true,
        description: 'Source script URL.'
      },
      {
        name: 'handler',
        $ref: 'Runtime.RemoteObject',
        optional: true,
        description: 'Event handler function value.'
      }
    ],
    description: 'DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes. DOMNode is a base node mirror type.'
  };
  DOM.RGBA = {
    id: 'RGBA',
    type: 'object',
    properties: [
      {
        name: 'r',
        type: 'integer',
        description: 'The red component, in the [0-255] range.'
      },
      {
        name: 'g',
        type: 'integer',
        description: 'The green component, in the [0-255] range.'
      },
      {
        name: 'b',
        type: 'integer',
        description: 'The blue component, in the [0-255] range.'
      },
      {
        name: 'a',
        type: 'number',
        optional: true,
        description: 'The alpha component, in the [0-1] range (default: 1).'
      }
    ],
    description: 'A structure holding an RGBA color.'
  };
  DOM.Quad = {
    id: 'Quad',
    type: 'array',
    items: { type: 'number' },
    minItems: 8,
    maxItems: 8,
    description: 'An array of quad vertices, x immediately followed by y for each point, points clock-wise.'
  };
  DOM.HighlightConfig = {
    id: 'HighlightConfig',
    type: 'object',
    properties: [
      {
        name: 'showInfo',
        type: 'boolean',
        optional: true,
        description: 'Whether the node info tooltip should be shown (default: false).'
      },
      {
        name: 'contentColor',
        $ref: 'RGBA',
        optional: true,
        description: 'The content box highlight fill color (default: transparent).'
      },
      {
        name: 'paddingColor',
        $ref: 'RGBA',
        optional: true,
        description: 'The padding highlight fill color (default: transparent).'
      },
      {
        name: 'borderColor',
        $ref: 'RGBA',
        optional: true,
        description: 'The border highlight fill color (default: transparent).'
      },
      {
        name: 'marginColor',
        $ref: 'RGBA',
        optional: true,
        description: 'The margin highlight fill color (default: transparent).'
      }
    ],
    description: 'Configuration data for the highlighting of page elements.'
  };
  return DOM;
};
