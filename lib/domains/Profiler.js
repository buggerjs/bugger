// Generated by CoffeeScript 2.0.0-beta7
var callbackWrapper, EventEmitter;
EventEmitter = require('events').EventEmitter;
callbackWrapper = require('../callback-wrapper');
module.exports = function (param$) {
  var cache$, cache$1, debugClient, forked, forwardMethod, Profiler, unwrapWrapped, wrapCallback;
  {
    cache$ = param$;
    debugClient = cache$.debugClient;
    forked = cache$.forked;
  }
  Profiler = new EventEmitter;
  cache$1 = callbackWrapper();
  wrapCallback = cache$1.wrapCallback;
  unwrapWrapped = cache$1.unwrapWrapped;
  forked.on('message', function (message) {
    var command;
    if (message.type === 'forward_res') {
      command = message.command;
      if (!(command.substr(0, 9) === 'Profiler.'))
        return;
      return unwrapWrapped(message);
    }
  });
  forwardMethod = function (method) {
    return Profiler[method] = function (params, cb) {
      var message;
      message = {
        type: 'forward_req',
        command: 'Profiler.' + method,
        params: params,
        seq: wrapCallback(cb)
      };
      return forked.send(message);
    };
  };
  Profiler.causesRecompilation = function (param$1, cb) {
    void 0;
    return cb(null, { result: false });
  };
  forwardMethod('isSampling');
  Profiler.hasHeapProfiler = function (param$1, cb) {
    void 0;
    return cb(null, { result: true });
  };
  forwardMethod('hasHeapProfiler');
  forwardMethod('enable');
  forwardMethod('disable');
  forwardMethod('start');
  forwardMethod('stop');
  forwardMethod('getProfileHeaders');
  forwardMethod('getCPUProfile');
  forwardMethod('getHeapSnapshot');
  forwardMethod('removeProfile');
  forwardMethod('clearProfiles');
  forwardMethod('takeHeapSnapshot');
  Profiler.collectGarbage = function (param$1, cb) {
    void 0;
  };
  forwardMethod('getObjectByHeapObjectId');
  forwardMethod('getHeapObjectId');
  Profiler.emit_addProfileHeader = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Profiler.addProfileHeader'
    };
    return this.emit('notification', notification);
  };
  Profiler.emit_addHeapSnapshotChunk = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Profiler.addHeapSnapshotChunk'
    };
    return this.emit('notification', notification);
  };
  Profiler.emit_finishHeapSnapshot = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Profiler.finishHeapSnapshot'
    };
    return this.emit('notification', notification);
  };
  Profiler.emit_setRecordingProfile = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Profiler.setRecordingProfile'
    };
    return this.emit('notification', notification);
  };
  Profiler.emit_resetProfiles = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Profiler.resetProfiles'
    };
    return this.emit('notification', notification);
  };
  Profiler.emit_reportHeapSnapshotProgress = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Profiler.reportHeapSnapshotProgress'
    };
    return this.emit('notification', notification);
  };
  Profiler.ProfileHeader = {
    id: 'ProfileHeader',
    type: 'object',
    description: 'Profile header.',
    properties: [
      {
        name: 'typeId',
        type: 'string',
        'enum': [
          'CPU',
          'CSS',
          'HEAP'
        ],
        description: 'Profile type name.'
      },
      {
        name: 'title',
        type: 'string',
        description: 'Profile title.'
      },
      {
        name: 'uid',
        type: 'integer',
        description: 'Unique identifier of the profile.'
      },
      {
        name: 'maxJSObjectId',
        type: 'integer',
        optional: true,
        description: 'Last seen JS object Id.'
      }
    ]
  };
  Profiler.CPUProfileNode = {
    id: 'CPUProfileNode',
    type: 'object',
    description: 'CPU Profile node. Holds callsite information, execution statistics and child nodes.',
    properties: [
      {
        name: 'functionName',
        type: 'string',
        description: 'Function name.'
      },
      {
        name: 'url',
        type: 'string',
        description: 'URL.'
      },
      {
        name: 'lineNumber',
        type: 'integer',
        description: 'Line number.'
      },
      {
        name: 'totalTime',
        type: 'number',
        description: 'Total execution time.'
      },
      {
        name: 'selfTime',
        type: 'number',
        description: 'Self time.'
      },
      {
        name: 'numberOfCalls',
        type: 'integer',
        description: 'Number of calls.'
      },
      {
        name: 'visible',
        type: 'boolean',
        description: 'Visibility.'
      },
      {
        name: 'callUID',
        type: 'number',
        description: 'Call UID.'
      },
      {
        name: 'children',
        type: 'array',
        items: { $ref: 'CPUProfileNode' },
        description: 'Child nodes.'
      },
      {
        name: 'id',
        optional: true,
        type: 'integer',
        description: 'Unique id of the node.'
      }
    ]
  };
  Profiler.CPUProfile = {
    id: 'CPUProfile',
    type: 'object',
    description: 'Profile.',
    properties: [
      {
        name: 'head',
        $ref: 'CPUProfileNode',
        optional: true
      },
      {
        name: 'idleTime',
        type: 'number',
        optional: true
      },
      {
        name: 'samples',
        optional: true,
        type: 'array',
        items: { type: 'integer' },
        description: 'Ids of samples top nodes.'
      }
    ]
  };
  Profiler.HeapSnapshotObjectId = {
    id: 'HeapSnapshotObjectId',
    type: 'string',
    description: 'Heap snashot object id.'
  };
  return Profiler;
};
