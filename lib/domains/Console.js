// Generated by CoffeeScript 2.0.0-beta5
var defaults, EventEmitter;
EventEmitter = require('events').EventEmitter;
defaults = require('lodash').defaults;
module.exports = function (param$) {
  var cache$, Console, ConsoleMessage, debugClient, forked, processStdErrData, processStdOutData;
  {
    cache$ = param$;
    debugClient = cache$.debugClient;
    forked = cache$.forked;
  }
  Console = new EventEmitter;
  ConsoleMessage = function (attrs) {
    return defaults(attrs, {
      source: 'javascript',
      level: 'log'
    });
  };
  processStdOutData = function (data) {
    var parameters, parsedText, rawText;
    rawText = data.toString();
    parameters = [];
    parsedText = rawText.replace(/\x1B\[(\d+)m/g, function (_, code) {
      var color;
      color = function () {
        switch (code) {
        case '0':
        case '39':
          return 'black';
        case '31':
          return 'maroon';
        case '32':
          return 'green';
        case '33':
          return 'olive';
        case '34':
          return 'navy';
        case '35':
          return 'purple';
        case '36':
          return 'teal';
        case '37':
          return 'silver';
        }
      }.call(this);
      parameters.push({
        type: 'string',
        value: 'color: ' + color
      });
      return '%c';
    });
    return Console.emit_messageAdded({
      message: ConsoleMessage({
        parameters: [{
            type: 'string',
            value: parsedText
          }].concat(parameters)
      })
    });
  };
  processStdErrData = function (data) {
    return Console.emit_messageAdded({
      message: ConsoleMessage({
        text: data.toString(),
        level: 'error'
      })
    });
  };
  Console.enable = function (param$1, cb) {
    void 0;
    forked.stdout.on('data', processStdOutData);
    forked.stderr.on('data', processStdErrData);
    return cb();
  };
  Console.disable = function (param$1, cb) {
    void 0;
    forked.stdout.removeListener('data', processStdOutData);
    forked.stderr.removeListener('data', processStdErrData);
    return cb();
  };
  Console.clearMessages = function (param$1, cb) {
    void 0;
  };
  Console.setMonitoringXHREnabled = function (param$1, cb) {
    var enabled;
    enabled = param$1.enabled;
  };
  Console.addInspectedNode = function (param$1, cb) {
    var nodeId;
    nodeId = param$1.nodeId;
  };
  Console.addInspectedHeapObject = function (param$1, cb) {
    var heapObjectId;
    heapObjectId = param$1.heapObjectId;
  };
  Console.emit_messageAdded = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Console.messageAdded'
    };
    return this.emit('notification', notification);
  };
  Console.emit_messageRepeatCountUpdated = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Console.messageRepeatCountUpdated'
    };
    return this.emit('notification', notification);
  };
  Console.emit_messagesCleared = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Console.messagesCleared'
    };
    return this.emit('notification', notification);
  };
  Console.ConsoleMessage = {
    id: 'ConsoleMessage',
    type: 'object',
    description: 'Console message.',
    properties: [
      {
        name: 'source',
        type: 'string',
        'enum': [
          'xml',
          'javascript',
          'network',
          'console-api',
          'storage',
          'appcache',
          'rendering',
          'css',
          'security',
          'other'
        ],
        description: 'Message source.'
      },
      {
        name: 'level',
        type: 'string',
        'enum': [
          'log',
          'warning',
          'error',
          'debug'
        ],
        description: 'Message severity.'
      },
      {
        name: 'text',
        type: 'string',
        description: 'Message text.'
      },
      {
        name: 'type',
        type: 'string',
        optional: true,
        'enum': [
          'log',
          'dir',
          'dirxml',
          'table',
          'trace',
          'clear',
          'startGroup',
          'startGroupCollapsed',
          'endGroup',
          'assert',
          'timing',
          'profile',
          'profileEnd'
        ],
        description: 'Console message type.'
      },
      {
        name: 'url',
        type: 'string',
        optional: true,
        description: 'URL of the message origin.'
      },
      {
        name: 'line',
        type: 'integer',
        optional: true,
        description: 'Line number in the resource that generated this message.'
      },
      {
        name: 'column',
        type: 'integer',
        optional: true,
        description: 'Column number on the line in the resource that generated this message.'
      },
      {
        name: 'repeatCount',
        type: 'integer',
        optional: true,
        description: 'Repeat count for repeated messages.'
      },
      {
        name: 'parameters',
        type: 'array',
        items: { $ref: 'Runtime.RemoteObject' },
        optional: true,
        description: 'Message parameters in case of the formatted message.'
      },
      {
        name: 'stackTrace',
        $ref: 'StackTrace',
        optional: true,
        description: 'JavaScript stack trace for assertions and error messages.'
      },
      {
        name: 'networkRequestId',
        $ref: 'Network.RequestId',
        optional: true,
        description: 'Identifier of the network request associated with this message.'
      }
    ]
  };
  Console.CallFrame = {
    id: 'CallFrame',
    type: 'object',
    description: 'Stack entry for console errors and assertions.',
    properties: [
      {
        name: 'functionName',
        type: 'string',
        description: 'JavaScript function name.'
      },
      {
        name: 'url',
        type: 'string',
        description: 'JavaScript script name or url.'
      },
      {
        name: 'lineNumber',
        type: 'integer',
        description: 'JavaScript script line number.'
      },
      {
        name: 'columnNumber',
        type: 'integer',
        description: 'JavaScript script column number.'
      }
    ]
  };
  Console.StackTrace = {
    id: 'StackTrace',
    type: 'array',
    items: { $ref: 'CallFrame' },
    description: 'Call frames for assertions or error messages.'
  };
  return Console;
};
