// Generated by CoffeeScript 2.0.0-beta7
var EventEmitter;
EventEmitter = require('events').EventEmitter;
module.exports = function (agentContext) {
  var Canvas;
  Canvas = new EventEmitter;
  Canvas.enable = function (param$, cb) {
    void 0;
  };
  Canvas.disable = function (param$, cb) {
    void 0;
  };
  Canvas.dropTraceLog = function (param$, cb) {
    var traceLogId;
    traceLogId = param$.traceLogId;
  };
  Canvas.hasUninstrumentedCanvases = function (param$, cb) {
    void 0;
  };
  Canvas.captureFrame = function (param$, cb) {
    var frameId;
    frameId = param$.frameId;
  };
  Canvas.startCapturing = function (param$, cb) {
    var frameId;
    frameId = param$.frameId;
  };
  Canvas.stopCapturing = function (param$, cb) {
    var traceLogId;
    traceLogId = param$.traceLogId;
  };
  Canvas.getTraceLog = function (param$, cb) {
    var cache$, maxLength, startOffset, traceLogId;
    {
      cache$ = param$;
      traceLogId = cache$.traceLogId;
      startOffset = cache$.startOffset;
      maxLength = cache$.maxLength;
    }
  };
  Canvas.replayTraceLog = function (param$, cb) {
    var cache$, stepNo, traceLogId;
    {
      cache$ = param$;
      traceLogId = cache$.traceLogId;
      stepNo = cache$.stepNo;
    }
  };
  Canvas.getResourceInfo = function (param$, cb) {
    var resourceId;
    resourceId = param$.resourceId;
  };
  Canvas.getResourceState = function (param$, cb) {
    var cache$, resourceId, traceLogId;
    {
      cache$ = param$;
      traceLogId = cache$.traceLogId;
      resourceId = cache$.resourceId;
    }
  };
  Canvas.emit_contextCreated = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Canvas.contextCreated'
    };
    return this.emit('notification', notification);
  };
  Canvas.emit_traceLogsRemoved = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Canvas.traceLogsRemoved'
    };
    return this.emit('notification', notification);
  };
  Canvas.ResourceId = {
    id: 'ResourceId',
    type: 'string',
    description: 'Unique resource identifier.'
  };
  Canvas.ResourceInfo = {
    id: 'ResourceInfo',
    type: 'object',
    properties: [
      {
        name: 'id',
        $ref: 'ResourceId'
      },
      {
        name: 'description',
        type: 'string'
      }
    ]
  };
  Canvas.ResourceState = {
    id: 'ResourceState',
    type: 'object',
    properties: [
      {
        name: 'id',
        $ref: 'ResourceId'
      },
      {
        name: 'traceLogId',
        $ref: 'TraceLogId'
      },
      {
        name: 'imageURL',
        type: 'string',
        optional: true,
        description: 'Screenshot image data URL.'
      }
    ]
  };
  Canvas.CallArgument = {
    id: 'CallArgument',
    type: 'object',
    properties: [{
        name: 'description',
        type: 'string'
      }]
  };
  Canvas.Call = {
    id: 'Call',
    type: 'object',
    properties: [
      {
        name: 'contextId',
        $ref: 'ResourceId'
      },
      {
        name: 'functionName',
        type: 'string',
        optional: true
      },
      {
        name: 'arguments',
        type: 'array',
        items: { $ref: 'CallArgument' },
        optional: true
      },
      {
        name: 'result',
        $ref: 'CallArgument',
        optional: true
      },
      {
        name: 'isDrawingCall',
        type: 'boolean',
        optional: true
      },
      {
        name: 'isFrameEndCall',
        type: 'boolean',
        optional: true
      },
      {
        name: 'property',
        type: 'string',
        optional: true
      },
      {
        name: 'value',
        $ref: 'CallArgument',
        optional: true
      },
      {
        name: 'sourceURL',
        type: 'string',
        optional: true
      },
      {
        name: 'lineNumber',
        type: 'integer',
        optional: true
      },
      {
        name: 'columnNumber',
        type: 'integer',
        optional: true
      }
    ]
  };
  Canvas.TraceLogId = {
    id: 'TraceLogId',
    type: 'string',
    description: 'Unique trace log identifier.'
  };
  Canvas.TraceLog = {
    id: 'TraceLog',
    type: 'object',
    properties: [
      {
        name: 'id',
        $ref: 'TraceLogId'
      },
      {
        name: 'calls',
        type: 'array',
        items: { $ref: 'Call' }
      },
      {
        name: 'startOffset',
        type: 'integer'
      },
      {
        name: 'alive',
        type: 'boolean'
      },
      {
        name: 'totalAvailableCalls',
        type: 'number'
      }
    ]
  };
  return Canvas;
};
