// Generated by CoffeeScript 2.0.0-beta7
var callbackWrapper, EventEmitter;
EventEmitter = require('events').EventEmitter;
callbackWrapper = require('../callback-wrapper');
module.exports = function (param$) {
  var cache$, cache$1, debugClient, forked, forwardMethod, HeapProfiler, unwrapWrapped, wrapCallback;
  {
    cache$ = param$;
    debugClient = cache$.debugClient;
    forked = cache$.forked;
  }
  HeapProfiler = new EventEmitter;
  cache$1 = callbackWrapper();
  wrapCallback = cache$1.wrapCallback;
  unwrapWrapped = cache$1.unwrapWrapped;
  forked.on('message', function (message) {
    var command;
    if (message.type === 'forward_res') {
      command = message.command;
      if (!(command.substr(0, 13) === 'HeapProfiler.'))
        return;
      return unwrapWrapped(message);
    }
  });
  forwardMethod = function (method) {
    return HeapProfiler[method] = function (params, cb) {
      var message;
      message = {
        type: 'forward_req',
        command: 'HeapProfiler.' + method,
        params: params,
        seq: wrapCallback(cb)
      };
      return forked.send(message);
    };
  };
  HeapProfiler.hasHeapProfiler = function (param$1, cb) {
    void 0;
    return cb(null, { result: true });
  };
  forwardMethod('getProfileHeaders');
  forwardMethod('getHeapSnapshot');
  forwardMethod('removeProfile');
  forwardMethod('clearProfiles');
  forwardMethod('takeHeapSnapshot');
  HeapProfiler.collectGarbage = function (param$1, cb) {
    void 0;
  };
  HeapProfiler.getObjectByHeapObjectId = function (param$1, cb) {
    var cache$2, objectGroup, objectId;
    {
      cache$2 = param$1;
      objectId = cache$2.objectId;
      objectGroup = cache$2.objectGroup;
    }
  };
  HeapProfiler.getHeapObjectId = function (param$1, cb) {
    var objectId;
    objectId = param$1.objectId;
  };
  HeapProfiler.emit_addProfileHeader = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'HeapProfiler.addProfileHeader'
    };
    return this.emit('notification', notification);
  };
  HeapProfiler.emit_addHeapSnapshotChunk = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'HeapProfiler.addHeapSnapshotChunk'
    };
    return this.emit('notification', notification);
  };
  HeapProfiler.emit_finishHeapSnapshot = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'HeapProfiler.finishHeapSnapshot'
    };
    return this.emit('notification', notification);
  };
  HeapProfiler.emit_resetProfiles = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'HeapProfiler.resetProfiles'
    };
    return this.emit('notification', notification);
  };
  HeapProfiler.emit_reportHeapSnapshotProgress = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'HeapProfiler.reportHeapSnapshotProgress'
    };
    return this.emit('notification', notification);
  };
  HeapProfiler.ProfileHeader = {
    id: 'ProfileHeader',
    type: 'object',
    description: 'Profile header.',
    properties: [
      {
        name: 'title',
        type: 'string',
        description: 'Profile title.'
      },
      {
        name: 'uid',
        type: 'integer',
        description: 'Unique identifier of the profile.'
      },
      {
        name: 'maxJSObjectId',
        type: 'integer',
        optional: true,
        description: 'Last seen JS object Id.'
      }
    ]
  };
  HeapProfiler.HeapSnapshotObjectId = {
    id: 'HeapSnapshotObjectId',
    type: 'string',
    description: 'Heap snashot object id.'
  };
  return HeapProfiler;
};
