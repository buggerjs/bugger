// Generated by CoffeeScript 2.0.0-beta7
var EventEmitter;
EventEmitter = require('events').EventEmitter;
module.exports = function (agentContext) {
  var fakeLoaderId, fakeMainFrameId, Page;
  Page = new EventEmitter;
  fakeMainFrameId = 'bugger-main-frame';
  fakeLoaderId = 'bugger-loader-id';
  Page.enable = function (param$, cb) {
    var frame;
    void 0;
    frame = {
      id: fakeMainFrameId,
      loaderId: fakeLoaderId,
      url: '/',
      securityOrigin: '/',
      mimeType: 'text/javascript'
    };
    Page.emit_frameNavigated({ frame: frame });
    return cb(null, { result: true });
  };
  Page.disable = function (param$, cb) {
    void 0;
  };
  Page.addScriptToEvaluateOnLoad = function (param$, cb) {
    var scriptSource;
    scriptSource = param$.scriptSource;
  };
  Page.removeScriptToEvaluateOnLoad = function (param$, cb) {
    var identifier;
    identifier = param$.identifier;
  };
  Page.reload = function (param$, cb) {
    var cache$, ignoreCache, scriptPreprocessor, scriptToEvaluateOnLoad;
    {
      cache$ = param$;
      ignoreCache = cache$.ignoreCache;
      scriptToEvaluateOnLoad = cache$.scriptToEvaluateOnLoad;
      scriptPreprocessor = cache$.scriptPreprocessor;
    }
  };
  Page.navigate = function (param$, cb) {
    var url;
    url = param$.url;
  };
  Page.getCookies = function (param$, cb) {
    void 0;
  };
  Page.deleteCookie = function (param$, cb) {
    var cache$, cookieName, url;
    {
      cache$ = param$;
      cookieName = cache$.cookieName;
      url = cache$.url;
    }
  };
  Page.getResourceTree = function (param$, cb) {
    void 0;
  };
  Page.getResourceContent = function (param$, cb) {
    var cache$, frameId, url;
    {
      cache$ = param$;
      frameId = cache$.frameId;
      url = cache$.url;
    }
  };
  Page.searchInResource = function (param$, cb) {
    var cache$, caseSensitive, frameId, isRegex, query, url;
    {
      cache$ = param$;
      frameId = cache$.frameId;
      url = cache$.url;
      query = cache$.query;
      caseSensitive = cache$.caseSensitive;
      isRegex = cache$.isRegex;
    }
  };
  Page.searchInResources = function (param$, cb) {
    var cache$, caseSensitive, isRegex, text;
    {
      cache$ = param$;
      text = cache$.text;
      caseSensitive = cache$.caseSensitive;
      isRegex = cache$.isRegex;
    }
  };
  Page.setDocumentContent = function (param$, cb) {
    var cache$, frameId, html;
    {
      cache$ = param$;
      frameId = cache$.frameId;
      html = cache$.html;
    }
  };
  Page.canScreencast = function (param$, cb) {
    void 0;
    return cb(null, { result: false });
  };
  Page.canOverrideDeviceMetrics = function (param$, cb) {
    void 0;
    return cb(null, { result: false });
  };
  Page.setDeviceMetricsOverride = function (param$, cb) {
    var cache$, fitWindow, fontScaleFactor, height, width;
    {
      cache$ = param$;
      width = cache$.width;
      height = cache$.height;
      fontScaleFactor = cache$.fontScaleFactor;
      fitWindow = cache$.fitWindow;
    }
  };
  Page.setShowPaintRects = function (param$, cb) {
    var result;
    result = param$.result;
  };
  Page.canShowDebugBorders = function (param$, cb) {
    void 0;
    return cb(null, { result: false });
  };
  Page.setShowDebugBorders = function (param$, cb) {
    var show;
    show = param$.show;
  };
  Page.canShowFPSCounter = function (param$, cb) {
    void 0;
    return cb(null, { result: false });
  };
  Page.setShowFPSCounter = function (param$, cb) {
    var show;
    show = param$.show;
  };
  Page.canContinuouslyPaint = function (param$, cb) {
    void 0;
    return cb(null, { result: false });
  };
  Page.setContinuousPaintingEnabled = function (param$, cb) {
    var enabled;
    enabled = param$.enabled;
  };
  Page.getScriptExecutionStatus = function (param$, cb) {
    void 0;
  };
  Page.setScriptExecutionDisabled = function (param$, cb) {
    var value;
    value = param$.value;
  };
  Page.setGeolocationOverride = function (param$, cb) {
    var accuracy, cache$, latitude, longitude;
    {
      cache$ = param$;
      latitude = cache$.latitude;
      longitude = cache$.longitude;
      accuracy = cache$.accuracy;
    }
  };
  Page.clearGeolocationOverride = function (param$, cb) {
    void 0;
  };
  Page.canOverrideGeolocation = function (param$, cb) {
    void 0;
    return cb(null, { result: false });
  };
  Page.setDeviceOrientationOverride = function (param$, cb) {
    var alpha, beta, cache$, gamma;
    {
      cache$ = param$;
      alpha = cache$.alpha;
      beta = cache$.beta;
      gamma = cache$.gamma;
    }
  };
  Page.clearDeviceOrientationOverride = function (param$, cb) {
    void 0;
  };
  Page.canOverrideDeviceOrientation = function (param$, cb) {
    void 0;
    return cb(null, { result: false });
  };
  Page.setTouchEmulationEnabled = function (param$, cb) {
    var enabled;
    enabled = param$.enabled;
  };
  Page.setEmulatedMedia = function (param$, cb) {
    var media;
    media = param$.media;
  };
  Page.getCompositingBordersVisible = function (param$, cb) {
    void 0;
  };
  Page.setCompositingBordersVisible = function (param$, cb) {
    var visible;
    visible = param$.visible;
  };
  Page.captureScreenshot = function (param$, cb) {
    void 0;
  };
  Page.handleJavaScriptDialog = function (param$, cb) {
    var accept, cache$, promptText;
    {
      cache$ = param$;
      accept = cache$.accept;
      promptText = cache$.promptText;
    }
  };
  Page.setShowViewportSizeOnResize = function (param$, cb) {
    var cache$, show, showGrid;
    {
      cache$ = param$;
      show = cache$.show;
      showGrid = cache$.showGrid;
    }
  };
  Page.emit_domContentEventFired = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Page.domContentEventFired'
    };
    return this.emit('notification', notification);
  };
  Page.emit_loadEventFired = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Page.loadEventFired'
    };
    return this.emit('notification', notification);
  };
  Page.emit_frameNavigated = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Page.frameNavigated'
    };
    return this.emit('notification', notification);
  };
  Page.emit_frameDetached = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Page.frameDetached'
    };
    return this.emit('notification', notification);
  };
  Page.emit_frameStartedLoading = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Page.frameStartedLoading'
    };
    return this.emit('notification', notification);
  };
  Page.emit_frameStoppedLoading = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Page.frameStoppedLoading'
    };
    return this.emit('notification', notification);
  };
  Page.emit_frameScheduledNavigation = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Page.frameScheduledNavigation'
    };
    return this.emit('notification', notification);
  };
  Page.emit_frameClearedScheduledNavigation = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Page.frameClearedScheduledNavigation'
    };
    return this.emit('notification', notification);
  };
  Page.emit_javascriptDialogOpening = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Page.javascriptDialogOpening'
    };
    return this.emit('notification', notification);
  };
  Page.emit_javascriptDialogClosed = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Page.javascriptDialogClosed'
    };
    return this.emit('notification', notification);
  };
  Page.emit_scriptsEnabled = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Page.scriptsEnabled'
    };
    return this.emit('notification', notification);
  };
  Page.ResourceType = {
    id: 'ResourceType',
    type: 'string',
    'enum': [
      'Document',
      'Stylesheet',
      'Image',
      'Font',
      'Script',
      'XHR',
      'WebSocket',
      'Other'
    ],
    description: 'Resource type as it was perceived by the rendering engine.'
  };
  Page.Frame = {
    id: 'Frame',
    type: 'object',
    description: 'Information about the Frame on the page.',
    properties: [
      {
        name: 'id',
        type: 'string',
        description: 'Frame unique identifier.'
      },
      {
        name: 'parentId',
        type: 'string',
        optional: true,
        description: 'Parent frame identifier.'
      },
      {
        name: 'loaderId',
        $ref: 'Network.LoaderId',
        description: 'Identifier of the loader associated with this frame.'
      },
      {
        name: 'name',
        type: 'string',
        optional: true,
        description: "Frame's name as specified in the tag."
      },
      {
        name: 'url',
        type: 'string',
        description: "Frame document's URL."
      },
      {
        name: 'securityOrigin',
        type: 'string',
        description: "Frame document's security origin."
      },
      {
        name: 'mimeType',
        type: 'string',
        description: "Frame document's mimeType as determined by the browser."
      }
    ],
    hidden: true
  };
  Page.FrameResourceTree = {
    id: 'FrameResourceTree',
    type: 'object',
    description: 'Information about the Frame hierarchy along with their cached resources.',
    properties: [
      {
        name: 'frame',
        $ref: 'Frame',
        description: 'Frame information for this tree item.'
      },
      {
        name: 'childFrames',
        type: 'array',
        optional: true,
        items: { $ref: 'FrameResourceTree' },
        description: 'Child frames.'
      },
      {
        name: 'resources',
        type: 'array',
        items: {
          type: 'object',
          properties: [
            {
              name: 'url',
              type: 'string',
              description: 'Resource URL.'
            },
            {
              name: 'type',
              $ref: 'ResourceType',
              description: 'Type of this resource.'
            },
            {
              name: 'mimeType',
              type: 'string',
              description: 'Resource mimeType as determined by the browser.'
            },
            {
              name: 'failed',
              type: 'boolean',
              optional: true,
              description: 'True if the resource failed to load.'
            },
            {
              name: 'canceled',
              type: 'boolean',
              optional: true,
              description: 'True if the resource was canceled during loading.'
            },
            {
              name: 'sourceMapURL',
              type: 'string',
              optional: true,
              description: 'URL of source map associated with this resource (if any).'
            }
          ]
        },
        description: 'Information about frame resources.'
      }
    ],
    hidden: true
  };
  Page.SearchMatch = {
    id: 'SearchMatch',
    type: 'object',
    description: 'Search match for resource.',
    properties: [
      {
        name: 'lineNumber',
        type: 'number',
        description: 'Line number in resource content.'
      },
      {
        name: 'lineContent',
        type: 'string',
        description: 'Line with match content.'
      }
    ],
    hidden: true
  };
  Page.SearchResult = {
    id: 'SearchResult',
    type: 'object',
    description: 'Search result for resource.',
    properties: [
      {
        name: 'url',
        type: 'string',
        description: 'Resource URL.'
      },
      {
        name: 'frameId',
        $ref: 'Network.FrameId',
        description: 'Resource frame id.'
      },
      {
        name: 'matchesCount',
        type: 'number',
        description: 'Number of matches in the resource content.'
      }
    ],
    hidden: true
  };
  Page.Cookie = {
    id: 'Cookie',
    type: 'object',
    description: 'Cookie object',
    properties: [
      {
        name: 'name',
        type: 'string',
        description: 'Cookie name.'
      },
      {
        name: 'value',
        type: 'string',
        description: 'Cookie value.'
      },
      {
        name: 'domain',
        type: 'string',
        description: 'Cookie domain.'
      },
      {
        name: 'path',
        type: 'string',
        description: 'Cookie path.'
      },
      {
        name: 'expires',
        type: 'number',
        description: 'Cookie expires.'
      },
      {
        name: 'size',
        type: 'integer',
        description: 'Cookie size.'
      },
      {
        name: 'httpOnly',
        type: 'boolean',
        description: 'True if cookie is http-only.'
      },
      {
        name: 'secure',
        type: 'boolean',
        description: 'True if cookie is secure.'
      },
      {
        name: 'session',
        type: 'boolean',
        description: 'True in case of session cookie.'
      }
    ],
    hidden: true
  };
  Page.ScriptIdentifier = {
    id: 'ScriptIdentifier',
    type: 'string',
    description: 'Unique script identifier.',
    hidden: true
  };
  return Page;
};
