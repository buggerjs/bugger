// Generated by CoffeeScript 2.0.0-beta7
var EventEmitter;
EventEmitter = require('events').EventEmitter;
module.exports = function (agentContext) {
  var Network, responseDataCache;
  Network = new EventEmitter;
  responseDataCache = {};
  Network.enable = function (param$, cb) {
    void 0;
  };
  Network.disable = function (param$, cb) {
    void 0;
  };
  Network.setUserAgentOverride = function (param$, cb) {
    var userAgent;
    userAgent = param$.userAgent;
  };
  Network.setExtraHTTPHeaders = function (param$, cb) {
    var headers;
    headers = param$.headers;
  };
  Network.getResponseBody = function (param$, cb) {
    var requestId;
    requestId = param$.requestId;
    return cb(null, {
      body: responseDataCache[requestId],
      base64Encoded: false
    });
  };
  Network.replayXHR = function (param$, cb) {
    var requestId;
    requestId = param$.requestId;
  };
  Network.canClearBrowserCache = function (param$, cb) {
    void 0;
  };
  Network.clearBrowserCache = function (param$, cb) {
    void 0;
  };
  Network.canClearBrowserCookies = function (param$, cb) {
    void 0;
  };
  Network.clearBrowserCookies = function (param$, cb) {
    void 0;
  };
  Network.setCacheDisabled = function (param$, cb) {
    var cacheDisabled;
    cacheDisabled = param$.cacheDisabled;
  };
  Network._cacheResponseContent = function (param$) {
    var cache$, chunk, requestId;
    {
      cache$ = param$;
      requestId = cache$.requestId;
      chunk = cache$.chunk;
    }
    requestId = requestId.toString();
    if (null != responseDataCache[requestId])
      responseDataCache[requestId];
    else
      responseDataCache[requestId] = '';
    return responseDataCache[requestId] += chunk.toString();
  };
  Network.emit_requestWillBeSent = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Network.requestWillBeSent'
    };
    return this.emit('notification', notification);
  };
  Network.emit_requestServedFromCache = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Network.requestServedFromCache'
    };
    return this.emit('notification', notification);
  };
  Network.emit_responseReceived = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Network.responseReceived'
    };
    return this.emit('notification', notification);
  };
  Network.emit_dataReceived = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Network.dataReceived'
    };
    return this.emit('notification', notification);
  };
  Network.emit_loadingFinished = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Network.loadingFinished'
    };
    return this.emit('notification', notification);
  };
  Network.emit_loadingFailed = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Network.loadingFailed'
    };
    return this.emit('notification', notification);
  };
  Network.emit_requestServedFromMemoryCache = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Network.requestServedFromMemoryCache'
    };
    return this.emit('notification', notification);
  };
  Network.emit_webSocketWillSendHandshakeRequest = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Network.webSocketWillSendHandshakeRequest'
    };
    return this.emit('notification', notification);
  };
  Network.emit_webSocketHandshakeResponseReceived = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Network.webSocketHandshakeResponseReceived'
    };
    return this.emit('notification', notification);
  };
  Network.emit_webSocketCreated = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Network.webSocketCreated'
    };
    return this.emit('notification', notification);
  };
  Network.emit_webSocketClosed = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Network.webSocketClosed'
    };
    return this.emit('notification', notification);
  };
  Network.emit_webSocketFrameReceived = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Network.webSocketFrameReceived'
    };
    return this.emit('notification', notification);
  };
  Network.emit_webSocketFrameError = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Network.webSocketFrameError'
    };
    return this.emit('notification', notification);
  };
  Network.emit_webSocketFrameSent = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Network.webSocketFrameSent'
    };
    return this.emit('notification', notification);
  };
  Network.LoaderId = {
    id: 'LoaderId',
    type: 'string',
    description: 'Unique loader identifier.'
  };
  Network.FrameId = {
    id: 'FrameId',
    type: 'string',
    description: 'Unique frame identifier.',
    hidden: true
  };
  Network.RequestId = {
    id: 'RequestId',
    type: 'string',
    description: 'Unique request identifier.'
  };
  Network.Timestamp = {
    id: 'Timestamp',
    type: 'number',
    description: 'Number of seconds since epoch.'
  };
  Network.Headers = {
    id: 'Headers',
    type: 'object',
    description: 'Request / response headers as keys / values of JSON object.'
  };
  Network.ResourceTiming = {
    id: 'ResourceTiming',
    type: 'object',
    description: 'Timing information for the request.',
    properties: [
      {
        name: 'requestTime',
        type: 'number',
        description: "Timing's requestTime is a baseline in seconds, while the other numbers are ticks in milliseconds relatively to this requestTime."
      },
      {
        name: 'proxyStart',
        type: 'number',
        description: 'Started resolving proxy.'
      },
      {
        name: 'proxyEnd',
        type: 'number',
        description: 'Finished resolving proxy.'
      },
      {
        name: 'dnsStart',
        type: 'number',
        description: 'Started DNS address resolve.'
      },
      {
        name: 'dnsEnd',
        type: 'number',
        description: 'Finished DNS address resolve.'
      },
      {
        name: 'connectStart',
        type: 'number',
        description: 'Started connecting to the remote host.'
      },
      {
        name: 'connectEnd',
        type: 'number',
        description: 'Connected to the remote host.'
      },
      {
        name: 'sslStart',
        type: 'number',
        description: 'Started SSL handshake.'
      },
      {
        name: 'sslEnd',
        type: 'number',
        description: 'Finished SSL handshake.'
      },
      {
        name: 'sendStart',
        type: 'number',
        description: 'Started sending request.'
      },
      {
        name: 'sendEnd',
        type: 'number',
        description: 'Finished sending request.'
      },
      {
        name: 'receiveHeadersEnd',
        type: 'number',
        description: 'Finished receiving response headers.'
      }
    ]
  };
  Network.Request = {
    id: 'Request',
    type: 'object',
    description: 'HTTP request data.',
    properties: [
      {
        name: 'url',
        type: 'string',
        description: 'Request URL.'
      },
      {
        name: 'method',
        type: 'string',
        description: 'HTTP request method.'
      },
      {
        name: 'headers',
        $ref: 'Headers',
        description: 'HTTP request headers.'
      },
      {
        name: 'postData',
        type: 'string',
        optional: true,
        description: 'HTTP POST request data.'
      }
    ]
  };
  Network.Response = {
    id: 'Response',
    type: 'object',
    description: 'HTTP response data.',
    properties: [
      {
        name: 'url',
        type: 'string',
        description: 'Response URL. This URL can be different from CachedResource.url in case of redirect.'
      },
      {
        name: 'status',
        type: 'number',
        description: 'HTTP response status code.'
      },
      {
        name: 'statusText',
        type: 'string',
        description: 'HTTP response status text.'
      },
      {
        name: 'headers',
        $ref: 'Headers',
        description: 'HTTP response headers.'
      },
      {
        name: 'headersText',
        type: 'string',
        optional: true,
        description: 'HTTP response headers text.'
      },
      {
        name: 'mimeType',
        type: 'string',
        description: 'Resource mimeType as determined by the browser.'
      },
      {
        name: 'requestHeaders',
        $ref: 'Headers',
        optional: true,
        description: 'Refined HTTP request headers that were actually transmitted over the network.'
      },
      {
        name: 'requestHeadersText',
        type: 'string',
        optional: true,
        description: 'HTTP request headers text.'
      },
      {
        name: 'connectionReused',
        type: 'boolean',
        description: 'Specifies whether physical connection was actually reused for this request.'
      },
      {
        name: 'connectionId',
        type: 'number',
        description: 'Physical connection id that was actually used for this request.'
      },
      {
        name: 'fromDiskCache',
        type: 'boolean',
        optional: true,
        description: 'Specifies that the request was served from the disk cache.'
      },
      {
        name: 'timing',
        $ref: 'ResourceTiming',
        optional: true,
        description: 'Timing information for the given request.'
      }
    ]
  };
  Network.WebSocketRequest = {
    id: 'WebSocketRequest',
    type: 'object',
    description: 'WebSocket request data.',
    hidden: true,
    properties: [{
        name: 'headers',
        $ref: 'Headers',
        description: 'HTTP response headers.'
      }]
  };
  Network.WebSocketResponse = {
    id: 'WebSocketResponse',
    type: 'object',
    description: 'WebSocket response data.',
    hidden: true,
    properties: [
      {
        name: 'status',
        type: 'number',
        description: 'HTTP response status code.'
      },
      {
        name: 'statusText',
        type: 'string',
        description: 'HTTP response status text.'
      },
      {
        name: 'headers',
        $ref: 'Headers',
        description: 'HTTP response headers.'
      }
    ]
  };
  Network.WebSocketFrame = {
    id: 'WebSocketFrame',
    type: 'object',
    description: 'WebSocket frame data.',
    hidden: true,
    properties: [
      {
        name: 'opcode',
        type: 'number',
        description: 'WebSocket frame opcode.'
      },
      {
        name: 'mask',
        type: 'boolean',
        description: 'WebSocke frame mask.'
      },
      {
        name: 'payloadData',
        type: 'string',
        description: 'WebSocke frame payload data.'
      }
    ]
  };
  Network.CachedResource = {
    id: 'CachedResource',
    type: 'object',
    description: 'Information about the cached resource.',
    properties: [
      {
        name: 'url',
        type: 'string',
        description: 'Resource URL. This is the url of the original network request.'
      },
      {
        name: 'type',
        $ref: 'Page.ResourceType',
        description: 'Type of this resource.'
      },
      {
        name: 'response',
        $ref: 'Response',
        optional: true,
        description: 'Cached response data.'
      },
      {
        name: 'bodySize',
        type: 'number',
        description: 'Cached response body size.'
      },
      {
        name: 'sourceMapURL',
        type: 'string',
        optional: true,
        description: 'URL of source map associated with this resource (if any).'
      }
    ]
  };
  Network.Initiator = {
    id: 'Initiator',
    type: 'object',
    description: 'Information about the request initiator.',
    properties: [
      {
        name: 'type',
        type: 'string',
        'enum': [
          'parser',
          'script',
          'other'
        ],
        description: 'Type of this initiator.'
      },
      {
        name: 'stackTrace',
        $ref: 'Console.StackTrace',
        optional: true,
        description: 'Initiator JavaScript stack trace, set for Script only.'
      },
      {
        name: 'url',
        type: 'string',
        optional: true,
        description: 'Initiator URL, set for Parser type only.'
      },
      {
        name: 'lineNumber',
        type: 'number',
        optional: true,
        description: 'Initiator line number, set for Parser type only.'
      }
    ]
  };
  return Network;
};
