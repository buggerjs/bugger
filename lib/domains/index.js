// Generated by CoffeeScript 2.0.0-beta5
var agentContext, domainNames, domains, EventEmitter, loadDomainNames, readdirSync;
EventEmitter = require('events').EventEmitter;
readdirSync = require('fs').readdirSync;
module.exports = domains = new EventEmitter;
agentContext = { debugClient: null };
loadDomainNames = function () {
  return readdirSync(__dirname).filter(function (f) {
    return /^[A-Z].*\.js/.test(f);
  }).map(function (f) {
    return f.replace('.js', '');
  });
};
domainNames = loadDomainNames();
domains.handle = function (request) {
  var agent, cache$, cache$1, callback, command, domain, error, method, paramHint, params;
  cache$ = request;
  method = cache$.method;
  params = cache$.params;
  callback = cache$.callback;
  cache$1 = method.split('.');
  domain = cache$1[0];
  command = cache$1[1];
  agent = domains[domain];
  if (null != params)
    params;
  else
    params = {};
  if (!(null != agent)) {
    error = new Error('Domain ' + domain + ' not found');
    return domains.emit('error', error);
  }
  if (!(typeof agent[command] === 'function')) {
    paramHint = Object.keys(null != params ? params : {}).join(', ');
    error = new Error('Unknown command: ' + domain + '.' + command + '(' + paramHint + ')');
    return domains.emit('error', error);
  }
  return agent[command](params, callback);
};
domains.unload = function () {
  var agent, domain;
  for (var i$ = 0, length$ = domainNames.length; i$ < length$; ++i$) {
    domain = domainNames[i$];
    agent = domains[domain];
    if (null != agent) {
      agent.removeAllListeners();
      if (typeof agent.disable === 'function')
        agent.disable({}, function () {
        });
    }
    delete domains[domain];
  }
  return null;
};
domains.load = function (agentContext) {
  var agent, domain;
  domains.unload();
  for (var i$ = 0, length$ = domainNames.length; i$ < length$; ++i$) {
    domain = domainNames[i$];
    agent = domains[domain] = require('./' + domain)(agentContext);
    agent.on('notification', function (notification) {
      return domains.emit('notification', notification);
    });
  }
  return null;
};
