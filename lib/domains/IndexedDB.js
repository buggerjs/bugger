// Generated by CoffeeScript 2.0.0-beta5
var EventEmitter;
EventEmitter = require('events').EventEmitter;
module.exports = function (agentContext) {
  var IndexedDB;
  IndexedDB = new EventEmitter;
  IndexedDB.enable = function (param$, cb) {
    void 0;
  };
  IndexedDB.disable = function (param$, cb) {
    void 0;
  };
  IndexedDB.requestDatabaseNames = function (param$, cb) {
    var securityOrigin;
    securityOrigin = param$.securityOrigin;
  };
  IndexedDB.requestDatabase = function (param$, cb) {
    var cache$, databaseName, securityOrigin;
    {
      cache$ = param$;
      securityOrigin = cache$.securityOrigin;
      databaseName = cache$.databaseName;
    }
  };
  IndexedDB.requestData = function (param$, cb) {
    var cache$, databaseName, indexName, keyRange, objectStoreName, pageSize, securityOrigin, skipCount;
    {
      cache$ = param$;
      securityOrigin = cache$.securityOrigin;
      databaseName = cache$.databaseName;
      objectStoreName = cache$.objectStoreName;
      indexName = cache$.indexName;
      skipCount = cache$.skipCount;
      pageSize = cache$.pageSize;
      keyRange = cache$.keyRange;
    }
  };
  IndexedDB.clearObjectStore = function (param$, cb) {
    var cache$, databaseName, objectStoreName, securityOrigin;
    {
      cache$ = param$;
      securityOrigin = cache$.securityOrigin;
      databaseName = cache$.databaseName;
      objectStoreName = cache$.objectStoreName;
    }
  };
  IndexedDB.DatabaseWithObjectStores = {
    id: 'DatabaseWithObjectStores',
    type: 'object',
    description: 'Database with an array of object stores.',
    properties: [
      {
        name: 'name',
        type: 'string',
        description: 'Database name.'
      },
      {
        name: 'version',
        type: 'string',
        description: 'Deprecated string database version.'
      },
      {
        name: 'intVersion',
        type: 'integer',
        description: 'Integer database version.'
      },
      {
        name: 'objectStores',
        type: 'array',
        items: { $ref: 'ObjectStore' },
        description: 'Object stores in this database.'
      }
    ]
  };
  IndexedDB.ObjectStore = {
    id: 'ObjectStore',
    type: 'object',
    description: 'Object store.',
    properties: [
      {
        name: 'name',
        type: 'string',
        description: 'Object store name.'
      },
      {
        name: 'keyPath',
        $ref: 'KeyPath',
        description: 'Object store key path.'
      },
      {
        name: 'autoIncrement',
        type: 'boolean',
        description: 'If true, object store has auto increment flag set.'
      },
      {
        name: 'indexes',
        type: 'array',
        items: { $ref: 'ObjectStoreIndex' },
        description: 'Indexes in this object store.'
      }
    ]
  };
  IndexedDB.ObjectStoreIndex = {
    id: 'ObjectStoreIndex',
    type: 'object',
    description: 'Object store index.',
    properties: [
      {
        name: 'name',
        type: 'string',
        description: 'Index name.'
      },
      {
        name: 'keyPath',
        $ref: 'KeyPath',
        description: 'Index key path.'
      },
      {
        name: 'unique',
        type: 'boolean',
        description: 'If true, index is unique.'
      },
      {
        name: 'multiEntry',
        type: 'boolean',
        description: 'If true, index allows multiple entries for a key.'
      }
    ]
  };
  IndexedDB.Key = {
    id: 'Key',
    type: 'object',
    description: 'Key.',
    properties: [
      {
        name: 'type',
        type: 'string',
        'enum': [
          'number',
          'string',
          'date',
          'array'
        ],
        description: 'Key type.'
      },
      {
        name: 'number',
        type: 'number',
        optional: true,
        description: 'Number value.'
      },
      {
        name: 'string',
        type: 'string',
        optional: true,
        description: 'String value.'
      },
      {
        name: 'date',
        type: 'number',
        optional: true,
        description: 'Date value.'
      },
      {
        name: 'array',
        type: 'array',
        optional: true,
        items: { $ref: 'Key' },
        description: 'Array value.'
      }
    ]
  };
  IndexedDB.KeyRange = {
    id: 'KeyRange',
    type: 'object',
    description: 'Key range.',
    properties: [
      {
        name: 'lower',
        $ref: 'Key',
        optional: true,
        description: 'Lower bound.'
      },
      {
        name: 'upper',
        $ref: 'Key',
        optional: true,
        description: 'Upper bound.'
      },
      {
        name: 'lowerOpen',
        type: 'boolean',
        description: 'If true lower bound is open.'
      },
      {
        name: 'upperOpen',
        type: 'boolean',
        description: 'If true upper bound is open.'
      }
    ]
  };
  IndexedDB.DataEntry = {
    id: 'DataEntry',
    type: 'object',
    description: 'Data entry.',
    properties: [
      {
        name: 'key',
        $ref: 'Runtime.RemoteObject',
        description: 'Key.'
      },
      {
        name: 'primaryKey',
        $ref: 'Runtime.RemoteObject',
        description: 'Primary key.'
      },
      {
        name: 'value',
        $ref: 'Runtime.RemoteObject',
        description: 'Value.'
      }
    ]
  };
  IndexedDB.KeyPath = {
    id: 'KeyPath',
    type: 'object',
    description: 'Key path.',
    properties: [
      {
        name: 'type',
        type: 'string',
        'enum': [
          'null',
          'string',
          'array'
        ],
        description: 'Key path type.'
      },
      {
        name: 'string',
        type: 'string',
        optional: true,
        description: 'String value.'
      },
      {
        name: 'array',
        type: 'array',
        optional: true,
        items: { type: 'string' },
        description: 'Array value.'
      }
    ]
  };
  return IndexedDB;
};
