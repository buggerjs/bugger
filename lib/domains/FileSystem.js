// Generated by CoffeeScript 2.0.0-beta5
var EventEmitter;
EventEmitter = require('events').EventEmitter;
module.exports = function (agentContext) {
  var FileSystem;
  FileSystem = new EventEmitter;
  FileSystem.enable = function (param$, cb) {
    void 0;
  };
  FileSystem.disable = function (param$, cb) {
    void 0;
  };
  FileSystem.requestFileSystemRoot = function (param$, cb) {
    var cache$, origin, type;
    {
      cache$ = param$;
      origin = cache$.origin;
      type = cache$.type;
    }
  };
  FileSystem.requestDirectoryContent = function (param$, cb) {
    var url;
    url = param$.url;
  };
  FileSystem.requestMetadata = function (param$, cb) {
    var url;
    url = param$.url;
  };
  FileSystem.requestFileContent = function (param$, cb) {
    var cache$, charset, end, readAsText, start, url;
    {
      cache$ = param$;
      url = cache$.url;
      readAsText = cache$.readAsText;
      start = cache$.start;
      end = cache$.end;
      charset = cache$.charset;
    }
  };
  FileSystem.deleteEntry = function (param$, cb) {
    var url;
    url = param$.url;
  };
  FileSystem.Entry = {
    id: 'Entry',
    type: 'object',
    properties: [
      {
        name: 'url',
        type: 'string',
        description: 'filesystem: URL for the entry.'
      },
      {
        name: 'name',
        type: 'string',
        description: 'The name of the file or directory.'
      },
      {
        name: 'isDirectory',
        type: 'boolean',
        description: 'True if the entry is a directory.'
      },
      {
        name: 'mimeType',
        type: 'string',
        optional: true,
        description: 'MIME type of the entry, available for a file only.'
      },
      {
        name: 'resourceType',
        $ref: 'Page.ResourceType',
        optional: true,
        description: 'ResourceType of the entry, available for a file only.'
      },
      {
        name: 'isTextFile',
        type: 'boolean',
        optional: true,
        description: 'True if the entry is a text file.'
      }
    ],
    description: 'Represents a browser side file or directory.'
  };
  FileSystem.Metadata = {
    id: 'Metadata',
    type: 'object',
    properties: [
      {
        name: 'modificationTime',
        type: 'number',
        description: 'Modification time.'
      },
      {
        name: 'size',
        type: 'number',
        description: 'File size. This field is always zero for directories.'
      }
    ],
    description: 'Represents metadata of a file or entry.'
  };
  return FileSystem;
};
