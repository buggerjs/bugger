// Generated by CoffeeScript 2.0.0-beta4
var debug, EventEmitter, fs, http, path, send, servePatchedStaticFiles, SocketChannel, urlLib, WebSocketServer;
http = require('http');
fs = require('fs');
path = require('path');
urlLib = require('url');
EventEmitter = require('events').EventEmitter;
WebSocketServer = require('websocket').server;
send = require('send');
SocketChannel = require('./socket_channel');
debug = require('../debug-client');
servePatchedStaticFiles = function (req, res) {
  var publicDirectory, sourceMapId, sourceMapMatch;
  sourceMapMatch = req.url.match(/^\/_sourcemap\/(\d+)$/);
  if (null != sourceMapMatch) {
    sourceMapId = sourceMapMatch[1];
    res.setHeader('Content-Type', 'application/json');
    res.write(null != debug.sourceMaps[sourceMapId] ? debug.sourceMaps[sourceMapId] : '');
    return res.end();
  } else {
    publicDirectory = req.url === '/InspectorBackendCommands.js' || req.url === '/InspectorBackend.js' || req.url === '/Overrides.js' ? __dirname : path.join(__dirname, '..', '..', 'public');
    if (req.url.indexOf('/?') === 0) {
      return fs.readFile(publicDirectory + '/inspector.html', function (err, data) {
        data = data.toString().replace('</head>', '<title>bugger</title><script type="text/javascript" src="Overrides.js"></script></head>');
        res.setHeader('Content-Type', 'text/html');
        res.write(data);
        return res.end();
      });
    } else {
      return send(req, urlLib.parse(req.url).pathname).root(publicDirectory).pipe(res);
    }
  }
};
module.exports = Object.create(EventEmitter.prototype, {
  start: {
    value: function (param$) {
      var appUrl, cache$, httpServer, webhost, webport, wsServer;
      {
        cache$ = param$;
        webhost = cache$.webhost;
        webport = cache$.webport;
        appUrl = cache$.appUrl;
      }
      httpServer = http.createServer(servePatchedStaticFiles);
      wsServer = new WebSocketServer({
        httpServer: httpServer,
        autoAcceptConnections: true
      });
      wsServer.on('connect', function (wsConnection) {
        return new SocketChannel({
          socketConnection: wsConnection,
          httpServer: httpServer,
          socketServer: wsServer
        });
      });
      httpServer.on('listening', function () {
        return console.error('[bugger] Visit ' + appUrl + ' to start debugging');
      });
      return httpServer.listen(webport, webhost);
    }
  },
  close: {
    value: function () {
      if (this.wsServer) {
        this.wsServer.close();
        return this.emit('close');
      }
    }
  }
});
