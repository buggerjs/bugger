// Generated by CoffeeScript 2.0.0-beta4
var _, agents, debug, entryScript, fs, logAndReturn, SocketChannel, socketChannel, wrapperObject;
fs = require('fs');
debug = require('../debug-client');
agents = require('../agents');
_ = require('underscore');
entryScript = require('../forked/entry_script');
cache$ = require('../wrap_and_map');
wrapperObject = cache$.wrapperObject;
logAndReturn = cache$.logAndReturn;
SocketChannel = function () {
  function SocketChannel(param$) {
    var cache$1, instance$, this$, this$1, this$2, this$3;
    instance$ = this;
    this.sendParsedScripts = function (c) {
      return SocketChannel.prototype.sendParsedScripts.apply(instance$, arguments);
    };
    this.onPauseOrBreakpoint = function (c) {
      return SocketChannel.prototype.onPauseOrBreakpoint.apply(instance$, arguments);
    };
    {
      cache$1 = param$;
      this.socketConnection = cache$1.socketConnection;
      this.httpServer = cache$1.httpServer;
      this.socketServer = cache$1.socketServer;
    }
    console.log('[bugger] SocketChannel created');
    this.hiddenFilePatterns = [];
    debug.on('break', this.onPauseOrBreakpoint);
    entryScript.proc.stdout.on('data', (this$ = this, function (data) {
      return this$.console(data, 'log');
    }));
    entryScript.on('message', (this$1 = this, function (message) {
      return this$1.dispatchEvent(message.method, _.omit(message, 'method'));
    }));
    this.socketConnection.on('message', (this$2 = this, function (data) {
      return this$2.handleRequest(JSON.parse(data.utf8Data));
    }));
    this.socketConnection.on('disconnect', (this$3 = this, function () {
      return this$3.socketConnection = null;
    }));
    this.syncBrowser();
  }
  SocketChannel.prototype.console = function (message, mode) {
    var cleanedMessage;
    if (null == mode)
      mode = 'log';
    cleanedMessage = message.toString().replace(/\x1B\[([\d;]+)m/g, '');
    return this.dispatchEvent('Console.messageAdded', {
      messageObj: {
        text: cleanedMessage,
        level: mode
      }
    });
  };
  SocketChannel.prototype.pushTimelineEvent = function (type, record) {
    if (null == record)
      record = {};
    if (null != record.data)
      record.data;
    else
      record.data = {};
    record.type = type;
    return this.dispatchEvent('Timeline.eventRecorded', { record: record });
  };
  SocketChannel.prototype.handleRequest = function (msg) {
    var agentName, args, cache$1, functionName, this$;
    if (msg.method) {
      cache$1 = msg.method.split('.');
      agentName = cache$1[0];
      functionName = cache$1[1];
      console.log('[agents.handleRequest] ' + agentName + '#' + functionName);
      args = [];
      if (msg.params)
        args.push(msg.params);
      if (msg.id > 0) {
        args.push((this$ = this, function (error, data) {
          data = 2 <= arguments.length ? [].slice.call(arguments, 1) : [];
          return this$.sendResponse(msg.id, error, data);
        }));
      } else {
        args.push(function () {
        });
      }
      args.push(this);
      return agents.invoke(agentName, functionName, args);
    } else {
      return console.log('Unknown message from frontend:', msg);
    }
  };
  SocketChannel.prototype.sendResponse = function (seq, err, data) {
    if (null == data)
      data = {};
    if (this.socketConnection) {
      return this.socketConnection.send(JSON.stringify({
        id: seq,
        error: err,
        result: data
      }));
    } else {
      return console.log('Could not send response: ', req, data);
    }
  };
  SocketChannel.prototype.dispatchEvent = function (method, params) {
    if (null == params)
      params = {};
    if (this.socketConnection) {
      return this.socketConnection.send(JSON.stringify({
        method: method,
        params: params
      }));
    } else {
      return console.log('Could not dispatch event: ', method, params);
    }
  };
  SocketChannel.prototype.syncBrowser = function () {
    var args, this$;
    args = {
      'arguments': {
        includeSource: true,
        types: 4
      }
    };
    console.log('[debug.request] scripts', args);
    return debug.request('scripts', args, (this$ = this, function (scriptsResponse) {
      var this$1;
      console.log('[debug.response] scripts');
      this$.sendParsedScripts(scriptsResponse);
      return debug.request('listbreakpoints', {}, (this$1 = this$, function (breakpointsResponse) {
        breakpointsResponse.body.breakpoints.forEach(function (bp) {
          var data;
          if (bp.type === 'scriptId') {
            data = {
              sourceID: bp.script_id,
              url: debug.sourceIDs[bp.script_id].url,
              line: bp.line,
              enabled: bp.active,
              condition: bp.condition,
              number: bp.number
            };
            return debug.breakpoints[bp.script_id + ':' + bp.line] = data;
          }
        });
        if (!breakpointsResponse.running)
          return this$1.sendBacktrace();
      }));
    }));
  };
  SocketChannel.prototype.onPauseOrBreakpoint = function (breakDesc) {
    var args, scriptId, source;
    scriptId = null != breakDesc ? breakDesc.body.script.id : null;
    if (null != scriptId)
      source = debug.sourceIDs[scriptId];
    if (!(null != source)) {
      args = {
        'arguments': {
          includeSource: true,
          types: 4,
          ids: null != scriptId ? [breakDesc.body.script.id] : void 0
        }
      };
      debug.request('scripts', args, this.sendParsedScripts);
    } else if (null != source ? source.hidden : void 0) {
      debug.request('continue', { 'arguments': { stepaction: 'out' } });
      return;
    }
    return this.sendBacktrace();
  };
  SocketChannel.prototype.sendBacktrace = function () {
    var this$;
    return debug.request('backtrace', { 'arguments': { inlineRefs: true } }, (this$ = this, function (backtraceResponse) {
      var callFrames;
      callFrames = this$.mapCallFrames(backtraceResponse);
      return this$.dispatchEvent('Debugger.paused', { details: callFrames });
    }));
  };
  SocketChannel.prototype.mapCallFrames = function (backtraceResponse) {
    if (backtraceResponse.body.totalFrames > 0) {
      return backtraceResponse.body.frames.map(function (frame) {
        return {
          id: frame.index,
          functionName: frame.func.inferredName,
          type: 'function',
          worldId: 1,
          location: {
            scriptId: frame.func.scriptId.toString(),
            lineNumber: frame.line,
            columnNumber: frame.column
          },
          scopeChain: frame.scopes.map(function (scope) {
            return {
              object: wrapperObject('object', frame.receiver.className, true, frame.index, scope.index, 'backtrace'),
              type: function () {
                switch (scope.type) {
                case 0:
                  return 'global';
                case 1:
                  return 'local';
                case 2:
                  return 'with';
                case 3:
                  return 'closure';
                case 4:
                  return 'catch';
                }
              }.call(this)
            };
          })
        };
      });
    } else {
      return [{
          type: 'program',
          location: { scriptId: 'internal' },
          line: 0,
          id: 0,
          worldId: 1,
          scopeChain: []
        }];
    }
  };
  SocketChannel.prototype.sendParsedScripts = function (scriptsResponse) {
    var paths, scripts, shorten, this$;
    scripts = scriptsResponse.body.map(function (s) {
      return {
        scriptId: String(s.id),
        url: s.name,
        data: s.source,
        startLine: s.lineOffset,
        path: String(s.name).split('/'),
        isContentScript: false
      };
    });
    scripts.sort(function (a, b) {
      return a.path.length - b.path.length;
    });
    paths = [];
    shorten = function (s) {
      var i, p;
      for (var i$ = 0, length$ = function () {
            var accum$;
            var accum$;
            accum$ = [];
            for (var i$1 = s.length - 1; s.length - 1 <= 0 ? i$1 <= 0 : i$1 >= 0; s.length - 1 <= 0 ? ++i$1 : --i$1)
              accum$.push(i$1);
            return accum$;
          }.apply(this, arguments).length; i$ < length$; ++i$) {
        i = function () {
          var accum$;
          var accum$;
          accum$ = [];
          for (var i$1 = s.length - 1; s.length - 1 <= 0 ? i$1 <= 0 : i$1 >= 0; s.length - 1 <= 0 ? ++i$1 : --i$1)
            accum$.push(i$1);
          return accum$;
        }.apply(this, arguments)[i$];
        p = s.slice(i).join('/');
        if (paths.indexOf(p) === -1) {
          paths.push(p);
          return p;
        }
      }
      return s.join('/');
    };
    return scripts.forEach((this$ = this, function (s) {
      var hidden, item, sourceMapDesc, sourceMapMatch;
      hidden = this$.hiddenFilePatterns && this$.hiddenFilePatterns.some(function (r) {
        return r.test(s.url);
      });
      sourceMapMatch = s.data.match(/\s\/\/@ sourceMappingURL=data:application\/json;base64,(.*)/);
      s.sourceMapURL = null;
      item = {
        hidden: hidden,
        path: s.url
      };
      s.url = s.path.join('/');
      item.url = s.url;
      debug.sourceIDs[s.scriptId] = item;
      debug.sourceUrls[item.url] = s.scriptId;
      if (sourceMapMatch) {
        s.sourceMapURL = '/_sourcemap/' + s.scriptId;
        sourceMapDesc = JSON.parse(new Buffer(sourceMapMatch[1], 'base64').toString('utf8'));
        sourceMapDesc.sourcesContent = sourceMapDesc.sources.map(function (sourceFile) {
          return fs.readFileSync(sourceFile, 'utf8').toString();
        });
        debug.sourceMaps[s.scriptId.toString()] = JSON.stringify(sourceMapDesc);
      }
      delete s.path;
      if (!hidden)
        return this$.dispatchEvent('Debugger.scriptParsed', s);
    }));
  };
  return SocketChannel;
}();
module.exports = socketChannel = function (opts) {
  return new SocketChannel(opts);
};
