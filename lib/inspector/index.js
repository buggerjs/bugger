// Generated by CoffeeScript 2.0.0-beta5
var createClient, createServer, EventEmitter, inspector, webSocket;
createServer = require('http').createServer;
EventEmitter = require('events').EventEmitter;
webSocket = require('websocket');
createClient = require('./client');
module.exports = function () {
  var httpServer, inspector, sourceMaps, websocket;
  inspector = new EventEmitter;
  inspector.clients = {};
  sourceMaps = {};
  httpServer = inspector.httpServer = createServer(function (req, res) {
    var scriptId;
    res.setHeader('Access-Control-Allow-Origin', '*');
    if (0 === req.url.indexOf('/source-map/')) {
      res.setHeader('Content-Type', 'application/json');
      scriptId = req.url.replace(/\/source-map\/(\d+)/, '$1');
      res.write(sourceMaps[scriptId]);
    } else {
      res.write(httpServer.DEFAULT_URL + '\n');
    }
    return res.end();
  });
  websocket = inspector.websocket = new webSocket.server({
    httpServer: httpServer,
    autoAcceptConnections: true
  });
  websocket.on('connect', function (socket) {
    var client;
    client = createClient(socket);
    client.on('error', function (err) {
      return inspector.emit('error', err);
    });
    client.on('request', function (request) {
      return inspector.emit('request', request);
    });
    client.on('close', function () {
      delete inspector.clients[client.id];
      return inspector.emit('disconnect', client);
    });
    inspector.clients[client.id] = client;
    return inspector.emit('join', client);
  });
  inspector.dispatchEvent = function (notification) {
    var client, clientId, match, regex, script, tempMap;
    if (null != notification.params)
      notification.params;
    else
      notification.params = {};
    if (notification.method === 'Debugger.scriptParsed') {
      script = notification.params;
      if (null != script.scriptSource) {
        regex = /\/\/@ sourceMappingURL=data:application\/json;base64,(.*)/;
        match = regex.exec(script.scriptSource);
        if (match) {
          tempMap = function () {
            try {
              return JSON.parse(new Buffer(match[1], 'base64').toString('utf8'));
            } catch (e$) {
              return;
            }
          }.call(this);
          if (null != tempMap) {
            tempMap.sourcesContent = tempMap.sources.map(function (sourceFile) {
              try {
                return require('fs').readFileSync(sourceFile, 'utf8');
              } catch (e$) {
                return;
              }
            });
            tempMap.sources = tempMap.sources.map(function (sourceFile) {
              return 'file://' + sourceFile + '.src';
            });
            sourceMaps[script.scriptId] = JSON.stringify(tempMap);
            script.sourceMapURL = '' + httpServer.BASE_URL + '/source-map/' + script.scriptId;
          }
        }
        delete script.scriptSource;
      }
    }
    for (clientId in inspector.clients) {
      client = inspector.clients[clientId];
      client.dispatchEvent(notification);
    }
    return null;
  };
  httpServer.on('listening', function () {
    var address, cache$, port, query;
    cache$ = this.address();
    address = cache$.address;
    port = cache$.port;
    query = 'ws=' + address + ':' + port + '/websocket';
    httpServer.DEFAULT_URL = 'chrome://devtools/devtools.html?' + query;
    inspector.DEFAULT_URL = httpServer.DEFAULT_URL;
    return httpServer.BASE_URL = 'http://' + address + ':' + port;
  });
  inspector.listen = function () {
    return httpServer.listen.apply(httpServer, [].slice.call(arguments).concat());
  };
  return inspector;
};
if (!module.parent) {
  inspector = module.exports();
  inspector.listen(8058, function () {
    return console.log('Open Devtools:\n' + this.DEFAULT_URL);
  });
}
