// Generated by CoffeeScript 2.0.0-beta7
var createClient, EventEmitter, LAST_CLIENT_ID;
EventEmitter = require('events').EventEmitter;
LAST_CLIENT_ID = 0;
createClient = function (socket) {
  var client, handleRequest, sendResponse;
  client = new EventEmitter;
  client.socket = socket;
  client.id = ++LAST_CLIENT_ID;
  handleRequest = function (req) {
    var cache$, callback, err, id, method, params;
    cache$ = req;
    method = cache$.method;
    params = cache$.params;
    id = cache$.id;
    if (null != params)
      params;
    else
      params = {};
    if (!method) {
      err = new Error('Invalid request: ' + JSON.stringify(req));
      throw err;
    }
    callback = id > 0 ? function (error, result) {
      return sendResponse(id, error, result);
    } : function () {
    };
    return client.emit('request', {
      method: method,
      params: params,
      callback: callback,
      id: id
    });
  };
  sendResponse = function (id, error, result) {
    var errorMessage, response;
    if (null == result)
      result = {};
    if (socket && socket.connected) {
      response = null != error ? (errorMessage = 'string' === typeof error ? error : null != error.stack ? error.stack : error.message, {
        id: id,
        result: null,
        error: errorMessage
      }) : {
        id: id,
        result: result,
        error: null
      };
      return socket.send(JSON.stringify(response));
    } else {
      return client.emit('error', new Error('Tried to write to non-connected socket'));
    }
  };
  client.dispatchEvent = function (param$) {
    var cache$, errorMessage, method, params;
    {
      cache$ = param$;
      method = cache$.method;
      params = cache$.params;
    }
    if (null != params)
      params;
    else
      params = {};
    if (socket && socket.connected) {
      return socket.send(JSON.stringify({
        method: method,
        params: params
      }));
    } else {
      errorMessage = 'Could not dispatch ' + method + '(' + JSON.stringify(params);
      return client.emit('error', new Error(errorMessage));
    }
  };
  socket.on('message', function (data) {
    var err, req;
    try {
      req = JSON.parse(data.utf8Data);
      return handleRequest(req);
    } catch (e$) {
      err = e$;
      err.utf8Data = data.utf8Data;
      return client.emit('error', err);
    }
  });
  socket.on('close', function () {
    client.emit('close');
    return client.removeAllListeners();
  });
  return client;
};
module.exports = createClient;
