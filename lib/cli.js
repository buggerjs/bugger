// Generated by CoffeeScript 2.0.0-beta4
var forkChrome, forkEntryScript, inspectorServer, Module, run;
forkChrome = require('./forked/chrome');
forkEntryScript = require('./forked/entry_script').forkEntryScript;
inspectorServer = require('./inspector/server');
Module = require('module');
run = function () {
  var _chromeProc, _entryScriptProc, appUrl, argv, brk, cache$, chrome, debugPort, entryScript, entryScriptArg, scriptArgs, webhost, webport;
  argv = require('./argv');
  cache$ = argv;
  chrome = cache$.chrome;
  brk = cache$.brk;
  webhost = cache$.webhost;
  webport = cache$.webport;
  debugPort = argv.debugport;
  require('./lang');
  entryScriptArg = argv._.shift();
  entryScript = function () {
    var err;
    try {
      return Module._resolveFilename(entryScriptArg);
    } catch (e$) {
      err = e$;
      if (entryScriptArg[0] === '/')
        throw err;
      return Module._resolveFilename('./' + entryScriptArg);
    }
  }.call(this);
  scriptArgs = argv._;
  _entryScriptProc = null;
  _chromeProc = null;
  process.on('exit', function () {
    console.error('[bugger] Cleanup on exit...');
    try {
      if (null != _entryScriptProc)
        _entryScriptProc.kill();
    } catch (e$) {
    }
    try {
      if (null != _chromeProc)
        return _chromeProc.kill();
    } catch (e$1) {
      return;
    }
  });
  process.once('uncaughtException', function (e) {
    console.error('[bugger] Cleanup on exception...');
    try {
      if (null != _entryScriptProc)
        _entryScriptProc.kill();
    } catch (e$) {
    }
    try {
      if (null != _chromeProc)
        _chromeProc.kill();
    } catch (e$1) {
    }
    throw e;
  });
  appUrl = argv.getAppUrl();
  if (chrome) {
    _chromeProc = forkChrome({
      webhost: webhost,
      webport: webport,
      appUrl: appUrl
    });
    _chromeProc.on('exit', function () {
      console.error('[bugger] Chrome closed, exiting...');
      return process.exit(0);
    });
  }
  return forkEntryScript({
    entryScript: entryScript,
    scriptArgs: scriptArgs,
    brk: brk,
    debugPort: debugPort
  }, function (entryScriptProc) {
    _entryScriptProc = entryScriptProc;
    _entryScriptProc.on('exit', function () {
      console.error('[bugger] Script finished, exiting...');
      return process.exit(0);
    });
    return inspectorServer.start({
      webhost: webhost,
      webport: webport,
      appUrl: appUrl
    });
  });
};
module.exports = { run: run };
