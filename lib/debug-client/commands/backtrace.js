// Generated by CoffeeScript 2.0.0-beta7
var ErrorObjectFromMessage, functionName, mapFrame, RemoteObject, RemoteScript, series;
series = require('async').series;
RemoteScript = require('../remote-script');
RemoteObject = require('../remote-object').RemoteObject;
ErrorObjectFromMessage = require('../remote-object').ErrorObjectFromMessage;
functionName = function (func) {
  if (!!func.name) {
    return func.name;
  } else {
    return func.inferredName;
  }
};
mapFrame = function (refs) {
  return function (rawFrame) {
    return {
      callFrameId: rawFrame.index.toString(),
      functionName: functionName(rawFrame.func),
      location: {
        scriptId: rawFrame.func.scriptId.toString(),
        lineNumber: rawFrame.line,
        columnNumber: rawFrame.column
      },
      scopeChain: rawFrame.scopes.map(function (scope) {
        return refs['scope:' + rawFrame.index + ':' + scope.index];
      })
    };
  };
};
module.exports = function (debugClient) {
  var backtrace;
  backtrace = function (options, cb) {
    return debugClient.sendRequest('backtrace', options, function (err, response) {
      var body, cache$, cache$1, frames, fromFrame, message, refs, success, tasks, toFrame, totalFrames;
      cache$ = response;
      refs = cache$.refs;
      body = cache$.body;
      success = cache$.success;
      message = cache$.message;
      if (success) {
        cache$1 = body;
        fromFrame = cache$1.fromFrame;
        toFrame = cache$1.toFrame;
        totalFrames = cache$1.totalFrames;
        frames = cache$1.frames;
        if (!Array.isArray(frames))
          frames = [];
        tasks = frames.map(function (frame) {
          return function (cb) {
            return debugClient.commands.scopes({ frameNumber: frame.index }, function (err, res) {
              var scope;
              if (null != err)
                return cb(err);
              for (var i$ = 0, length$ = res.scopes.length; i$ < length$; ++i$) {
                scope = res.scopes[i$];
                refs['scope:' + frame.index + ':' + scope.index] = scope;
              }
              return cb();
            });
          };
        });
        return series(tasks, function (err) {
          var callFrames;
          if (null != err)
            return cb(err);
          callFrames = frames.map(mapFrame(refs));
          return cb(null, {
            fromFrame: fromFrame,
            toFrame: toFrame,
            totalFrames: totalFrames,
            callFrames: callFrames
          });
        });
      } else {
        return cb(ErrorObjectFromMessage(options)(refs)(message));
      }
    });
  };
  return backtrace;
};
