// Generated by CoffeeScript 2.0.0-beta5
var assertObjectGroup, ErrorObjectFromMessage, extend, omit, RemoteObject, safeInObjectGroup;
cache$ = require('lodash');
omit = cache$.omit;
extend = cache$.extend;
cache$1 = require('../remote-object');
RemoteObject = cache$1.RemoteObject;
ErrorObjectFromMessage = cache$1.ErrorObjectFromMessage;
assertObjectGroup = function (objectGroup) {
  var cmd;
  cmd = 'root.__bugger__ || (root.__bugger__ = {});';
  cmd += 'root.__bugger__[' + JSON.stringify(objectGroup) + ']';
  return cmd += ' || (root.__bugger__[' + JSON.stringify(objectGroup) + '] = {});';
};
safeInObjectGroup = function (objectGroup, objectId, expr) {
  var cmd;
  cmd = assertObjectGroup(objectGroup);
  return cmd += 'root.__bugger__[' + JSON.stringify(objectGroup) + '][' + JSON.stringify(objectId) + '] = (' + expr + ');';
};
module.exports = function (debugClient) {
  var evaluate;
  evaluate = function (options) {
    var fn;
    fn = function (expression, cb) {
      var cache$2, forcedId, forceObjectId, objectGroup, reqParams;
      if (expression.trim() === '')
        expression = 'false';
      reqParams = {
        disable_break: !!options.doNotPauseOnExceptionsAndMuteConsole,
        global: !(null != options.callFrameId),
        frame: options.callFrameId
      };
      forcedId = null;
      if (reqParams.global && options.objectGroup && options.forceObjectId) {
        cache$2 = options;
        objectGroup = cache$2.objectGroup;
        forceObjectId = cache$2.forceObjectId;
        expression = safeInObjectGroup(objectGroup, forceObjectId.toString(), expression);
        forcedId = '' + objectGroup + ':' + forceObjectId;
      }
      extend(reqParams, { expression: expression });
      if (options.returnByValue)
        reqParams.inline_refs = true;
      if (options.injectObjects)
        reqParams.additional_context = options.injectObjects.map(function (injectObject) {
          return {
            name: injectObject.name,
            handle: parseInt(injectObject.objectId, 10)
          };
        });
      return debugClient.sendRequest('evaluate', reqParams, function (err, response) {
        var body, cache$3, message, refMap, remoteObject, success;
        cache$3 = response;
        refMap = cache$3.refMap;
        body = cache$3.body;
        success = cache$3.success;
        message = cache$3.message;
        if (success) {
          remoteObject = RemoteObject(options)(refMap)(body);
          if (null != forcedId && null != remoteObject.objectId)
            remoteObject.objectId = forcedId;
          return cb(null, remoteObject);
        } else {
          return cb(ErrorObjectFromMessage(options)(refMap)(message));
        }
      });
    };
    fn.withOptions = function (overrides) {
      return evaluate(extend({}, options, overrides));
    };
    fn.onCallFrame = function (callFrameId) {
      return fn.withOptions({ callFrameId: callFrameId });
    };
    fn.saveInObjectGroup = function (objectGroup, objectId) {
      return fn.withOptions({
        objectGroup: objectGroup,
        forceObjectId: objectId
      });
    };
    return fn;
  };
  return evaluate;
};
