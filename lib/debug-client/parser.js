// Generated by CoffeeScript 2.0.0-beta7
var debugParser, EventEmitter;
EventEmitter = require('events').EventEmitter;
module.exports = debugParser = function (stream) {
  var buffer, currentMessage, emitter, emptyMessage, parseBody, parseBuffer, parseHeaders;
  buffer = '';
  emitter = new EventEmitter;
  emptyMessage = function () {
    return {
      headers: null,
      contentLength: 0
    };
  };
  currentMessage = emptyMessage();
  parseHeaders = function () {
    var contentLengthMatch, offset;
    offset = buffer.indexOf('\r\n\r\n');
    if (!(offset > 0))
      return false;
    currentMessage.headers = buffer.substr(0, offset + 4);
    contentLengthMatch = /Content-Length: (\d+)/.exec(currentMessage.headers);
    if (contentLengthMatch[1]) {
      currentMessage.contentLength = parseInt(contentLengthMatch[1], 10);
    } else {
      emitter.emit('error', new Error('No Content-Length'));
    }
    buffer = buffer.substr(offset + 4);
    return true;
  };
  parseBody = function () {
    var b, body, contentLength, error, obj;
    contentLength = currentMessage.contentLength;
    if (!(Buffer.byteLength(buffer) >= contentLength))
      return false;
    b = new Buffer(buffer);
    body = b.toString('utf8', 0, currentMessage.contentLength);
    buffer = b.toString('utf8', currentMessage.contentLength, b.length);
    if (body.length > 0)
      try {
        obj = JSON.parse(body);
        emitter.emit('parsed:' + obj.type, obj);
      } catch (e$) {
        error = e$;
        emitter.emit('error', error);
      }
    currentMessage = emptyMessage();
    return true;
  };
  parseBuffer = function () {
    var madeProgress;
    madeProgress = true;
    return function (accum$) {
      while (madeProgress) {
        accum$.push(madeProgress = !(null != currentMessage.headers) ? parseHeaders() : parseBody());
      }
      return accum$;
    }.call(this, []);
  };
  stream.on('data', function (chunk) {
    buffer += chunk;
    return parseBuffer(buffer);
  });
  return emitter;
};
