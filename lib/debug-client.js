// Generated by CoffeeScript 2.0.0-beta4
var DebugClient, EventEmitter;
EventEmitter = require('events').EventEmitter;
DebugClient = function (super$) {
  extends$(DebugClient, super$);
  function DebugClient() {
  }
  DebugClient.prototype.init = function (param$) {
    this.connection = param$.connection;
    this.connection.setEncoding('utf8');
    this.connected = this.connection.writable;
    this.socketBuffer = '';
    this.msg = false;
    this.callbackHandler = require('./callback').create();
    this.sourceIDs = {};
    this.sourceUrls = {};
    this.sourceMaps = {};
    this.breakpoints = {};
    return this._registerConnectionEvents(this.connection);
  };
  DebugClient.prototype.send = function (data) {
    if (this.connected) {
      return this.connection.write('Content-Length: ' + data.length + '\r\n\r\n' + data);
    } else {
      return console.error('[debug] Not connected');
    }
  };
  DebugClient.prototype.request = function (command, params, requestCallback) {
    var messageObj;
    messageObj = {
      seq: 0,
      type: 'request',
      command: command
    };
    if ('function' === typeof requestCallback)
      messageObj.seq = this.callbackHandler.wrap(requestCallback);
    if (params)
      Object.keys(params).forEach(function (key) {
        return messageObj[key] = params[key];
      });
    return this.send(JSON.stringify(messageObj));
  };
  DebugClient.prototype.close = function () {
    return this.connection.end();
  };
  DebugClient.prototype._registerConnectionEvents = function (conn) {
    var this$, this$1, this$2, this$3, this$4;
    conn.on('connect', (this$ = this, function () {
      this$.connected = true;
      return this$.emit('connect');
    }));
    conn.on('data', (this$1 = this, function (data) {
      this$1.socketBuffer += data;
      return this$1._continueParsing();
    }));
    conn.on('error', (this$2 = this, function (e) {
      return this$2.emit('error', e);
    }));
    conn.on('end', (this$3 = this, function () {
      return this$3.close();
    }));
    return conn.on('close', (this$4 = this, function () {
      this$4.connected = false;
      return this$4.emit('close');
    }));
  };
  DebugClient.prototype._continueParsing = function () {
    var b, contentLengthMatch, obj, offset;
    if (this.msg && this.msg.headersDone) {
      if (Buffer.byteLength(this.socketBuffer) >= this.msg.contentLength) {
        b = new Buffer(this.socketBuffer);
        this.msg.body = b.toString('utf8', 0, this.msg.contentLength);
        this.socketBuffer = b.toString('utf8', this.msg.contentLength, b.length);
        if (this.msg.body.length > 0) {
          obj = JSON.parse(this.msg.body);
          if (obj.type === 'response' && obj.request_seq > 0) {
            this.callbackHandler.processResponse(obj.request_seq, [obj]);
          } else if (obj.type === 'event') {
            this.emit(obj.event, obj);
          }
        }
        this.msg = false;
        return this._continueParsing();
      }
    } else {
      if (!this.msg)
        this.msg = this._makeMessage();
      offset = this.socketBuffer.indexOf('\r\n\r\n');
      if (offset > 0) {
        this.msg.headersDone = true;
        this.msg.headers = this.socketBuffer.substr(0, offset + 4);
        contentLengthMatch = /Content-Length: (\d+)/.exec(this.msg.headers);
        if (contentLengthMatch[1]) {
          this.msg.contentLength = parseInt(contentLengthMatch[1], 10);
        } else {
          console.warn('No Content-Length');
        }
        this.socketBuffer = this.socketBuffer.slice(offset + 4);
        return this._continueParsing();
      }
    }
  };
  DebugClient.prototype._makeMessage = function () {
    return {
      headersDone: false,
      headers: null,
      contentLength: 0
    };
  };
  return DebugClient;
}(EventEmitter);
module.exports = new DebugClient;
function isOwn$(o, p) {
  return {}.hasOwnProperty.call(o, p);
}
function extends$(child, parent) {
  var key;
  for (key in parent)
    if (isOwn$(parent, key))
      child[key] = parent[key];
  function ctor() {
    this.constructor = child;
  }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor;
  child.__super__ = parent.prototype;
  return child;
}
